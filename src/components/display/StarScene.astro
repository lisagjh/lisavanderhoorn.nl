---
import SplineLoader from "../../../node_modules/@splinetool/loader/dist/loader.module.js";
import LoadingScreen from "./LoadingScreen.astro";
---

<div
  id="loading-screen"
  style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(255, 255, 255, 0.8); display: flex; justify-content: center; align-items: center; z-index: 1000;"
>
  <LoadingScreen />
</div>

<div
  id="scene-container"
  style="position: absolute; top: 0; left: 0; width: 100%; height: 100%;"
>
</div>

<script type="module">
  import * as THREE from "../../../node_modules/three/build/three.module.js";
  import SplineLoader from "../../../node_modules/@splinetool/loader";

  window.addEventListener("load", () => {
    // Scene and Camera setup
    const camera = new THREE.OrthographicCamera(
      window.innerWidth / -2,
      window.innerWidth / 2,
      window.innerHeight / 2,
      window.innerHeight / -2,
      -50000,
      10000
    );
    camera.position.set(0, 0, 0);

    const scene = new THREE.Scene();
    const container = document.getElementById("scene-container");
    if (!container) return;

    // Renderer setup
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearAlpha(0); // transparent background
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFShadowMap;
    container.appendChild(renderer.domElement);

    // Load 3D scene
    const loader = new SplineLoader();
    loader.load(
      "https://prod.spline.design/0-BkZzEG9beBmu8d/scene.splinecode",
      (splineScene) => {
        scene.add(splineScene);

        // After the scene is loaded, hide the loading screen
        const loadingScreen = document.getElementById("loading-screen");
        if (loadingScreen) {
          loadingScreen.style.display = "none";
        }
      },
      undefined, // Optional progress callback
      (error) => {
        console.error("Error loading scene:", error);
      }
    );

    // Window resize handling
    const onWindowResize = () => {
      camera.left = window.innerWidth / -2;
      camera.right = window.innerWidth / 2;
      camera.top = window.innerHeight / 2;
      camera.bottom = window.innerHeight / -2;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    window.addEventListener("resize", onWindowResize);

    // Animation loop
    const animate = () => {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
    };
    animate();
  });
</script>
