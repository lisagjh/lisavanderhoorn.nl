---
import { getCollection } from "astro:content";
const projects = await getCollection("projects");
const allProjects = projects.sort((a, b) => a.data.id - b.data.id);
---

<section id="work">
  <div class="wrapper">
    <h2 class="pill">Work</h2>
    <p>{allProjects.length}</p>
    <p>Check out some projects I've worked on.</p>
  </div>
  <ul class="grid">
    {
      allProjects.map((project, index) => (
        <li class={index % 2 !== 0 ? "odd" : ""}>
          <a href={`/posts/${project.id}`}>
            <img
              src={project.data.image.url}
              alt={project.data.image.alt}
              loading="lazy"
              width="180"
            />
            <h3>{project.data.title}</h3>
            <p>{project.data.description}</p>
          </a>
        </li>
      ))
    }
  </ul>
  <div class="wrapper">
    <a href="/#" class="pill">More </a>
  </div>
</section>

<style>
  section {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    padding: 2rem;
    width: 100%;
    max-width: 65rem;
  }

  .wrapper {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: 2rem;
    align-items: center;
    background-color: var(--tertiary-light);
    border-radius: 10px;
  }

  .wrapper:first-of-type {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
  }

  .wrapper:first-of-type p:first-of-type {
    background-color: var(--tertiary);
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 20px;
    height: 2.5rem;
    width: 2.5rem;
    justify-self: end;
  }

  .wrapper:first-of-type p:last-of-type {
    grid-column: 1/3;
  }

  ul.grid {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  @media (width >= 37rem) {
    ul.grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 1rem;
    }

    ul.grid li:nth-of-type(3n + 1) {
      grid-column: span 1;
    }

    ul.grid li:nth-of-type(3n + 2) {
      grid-column: 2 / 4;
    }

    ul.grid li:nth-of-type(3n + 3) {
      grid-column: 1 / 3;
    }

    ul.grid li:nth-of-type(3n + 4) {
      grid-column: 3/4;
    }
  }

  li {
    background-color: var(--white);
    border-radius: 12px;
    box-shadow:
      0px 8px 13px 0px rgba(0, 0, 0, 0.03),
      0px 12px 11px 0px rgba(0, 0, 0, 0.02),
      0px 8px 8px 0px rgba(0, 0, 0, 0.03),
      0px -3px 4px 0px rgba(0, 0, 0, 0.03);
    list-style: "";
  }

  li a {
    height: 100%;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: start;
    gap: 1rem;
    padding: 2rem;
    text-decoration: none;
  }

  li h3 {
    font-family: var(--body-font);
    font-size: 1.35rem;
  }

  li p {
    max-width: 30ch;
    font-size: 0.9rem;
    letter-spacing: -0.25px;
  }

  .wrapper:has(a) {
    align-items: end;
  }

  @media (prefers-reduced-motion: no-preference) {
    @supports (animation-timeline: view()) {
      /* ul {
        animation: linear show-grid;
        animation-timeline: view();
        animation-range: entry 0% cover 20%;
      }

      @keyframes show-grid {
        from {
          opacity: 0;
          transform: translateY(20%);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      } */

      ul li {
        --delay: calc((sibling-index()) * 0.25s);
        animation: fade-slide-in 0.75s var(--delay) ease-out both;
      }

      ul li.odd {
        animation: fade-slide-in-odd 0.75s var(--delay) ease-out both;
      }

      @keyframes fade-slide-in {
        from {
          opacity: 0;
          transform: translateX(-5rem);
        }
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }

      @keyframes fade-slide-in-odd {
        from {
          opacity: 0;
          transform: translateX(5rem);
        }
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }
    }
  }
</style>
