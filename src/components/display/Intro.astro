<section class="intro">
  <h1 class="title">Lisa van der Hoorn</h1>

  <div class="wrapper js-hidden">
    <p class="split">Frontend <span class="dev">Developer</span></p>
  </div>
</section>

<style>
  .intro {
    display: flex;
    flex-direction: column;
    justify-content: start;
    gap: 1rem;
    padding: 8rem 2rem;
    width: 100%;
    max-width: 65rem;
    height: 75vh;
  }

  h1 {
    color: var(--primary);
    line-height: 1;
    display: block;
    overflow: visible;
  }

  .wrapper {
    position: relative;
    height: fit-content;
    width: fit-content;
    min-width: max-content;
  }

  .js-hidden {
    opacity: 0;
  }

  svg {
    position: absolute;
    bottom: -1.75rem;
    left: -1.5rem;
    z-index: -1;
    width: 13rem;
  }
</style>

<script type="module">
  import { gsap } from "../../node_modules/gsap";
  import { SplitText } from "../../node_modules/gsap/SplitText";
  import { ScrambleTextPlugin } from "../../node_modules/gsap/ScrambleTextPlugin.js";
  gsap.registerPlugin(SplitText);
  gsap.registerPlugin(ScrambleTextPlugin);

  const wrapper = document.querySelector(".wrapper");

  // Show the wrapper after a short delay
  setTimeout(() => {
    wrapper.classList.remove("js-hidden");
  }, 200);

  // --- title

  const title = document.querySelector(".title");
  const originalText = title.textContent;

  // Clear the container and set up for scrolling
  title.innerHTML = "";
  title.style.overflow = "hidden";
  title.style.position = "relative";
  title.style.height = "1.5em"; // Adjust based on your font size

  // Create two identical content elements for seamless scrolling
  const createTextElement = () => {
    const textElement = document.createElement("div");
    textElement.textContent = originalText;
    textElement.style.position = "absolute";
    textElement.style.width = "100%";
    return textElement;
  };

  const text1 = createTextElement();
  const text2 = createTextElement();

  // Add both to the container
  title.appendChild(text1);
  title.appendChild(text2);

  // Set up initial positions
  gsap.set(text1, { y: 0 });
  gsap.set(text2, { y: "100%" });

  // Create the continuous scrolling timeline
  const tl = gsap.timeline({
    repeat: -1,
    repeatDelay: 0,
  });

  // First text scrolls up and out
  tl.to(text1, {
    y: "-100%",
    duration: 2,
    ease: "none", // Linear movement for smooth scrolling
  });

  // Second text scrolls up from bottom to center
  // Running at the same time as the first animation
  tl.to(
    text2,
    {
      y: "0%",
      duration: 2,
      ease: "none",
    },
    "<"
  ); // Start at the same time as previous animation

  // Second text continues scrolling up and out
  tl.to(text2, {
    y: "-100%",
    duration: 2,
    ease: "none",
  });

  // First text reappears from bottom
  tl.to(
    text1,
    {
      y: "0%",
      duration: 2,
      ease: "none",
    },
    "<"
  ); // Start at the same time as previous animation

  // Optional: Control speed
  // tl.timeScale(0.5); // Slower
  // tl.timeScale(1.5); // Faster

  // --- next

  const split = new SplitText(wrapper, {
    type: "words",
    linesClass: "split",
    mask: "span",
  });

  gsap.fromTo(
    split.words,
    {
      y: "50%",
      opacity: 0,
      rotate: () => Math.random() * 20 - 15,
    },
    {
      y: "0%",
      opacity: 1,
      duration: 1,
      delay: 0.95,
      rotate: 0,
      stagger: {
        each: 0.05,
      },
    }
  );

  const dev = document.querySelector(".dev");

  const original = "Developer";
  const replacement = "Nerd";

  let timer;

  wrapper.addEventListener("mouseenter", () => {
    if (timer) clearTimeout(timer);
    timer = setTimeout(() => {
      gsap.to(dev, {
        scrambleText: {
          text: replacement,
          chars: "qwertyuioasdfghjklzxcvbnm",
          speed: 0.5,
        },
        duration: 0.65,
        ease: "power2.inOut",
      });
    }, 250);
  });

  wrapper.addEventListener("mouseleave", () => {
    if (timer) clearTimeout(timer);
    timer = setTimeout(() => {
      gsap.to(dev, {
        scrambleText: {
          text: original,
          chars: "qwertyuioasdfghjklzxcvbnm",
          speed: 0.5,
        },
        duration: 0.65,
        ease: "power2.inOut",
      });
    }, 250);
  });
</script>
