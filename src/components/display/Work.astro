---
import { getCollection } from "astro:content";
const projects = await getCollection("projects");
const allProjects = projects.sort((a, b) => b.data.id - a.data.id);
---

<section id="work" transition:name="work-wrapper">
  <div class="top-wrapper">
    <h2 class="pill">Work</h2>
    <p class="badge">{allProjects.length} projects</p>
    <p>Check out some projects I've worked on.</p>
  </div>
  <ul class="grid">
    {
      allProjects.slice(0, 4).map((project, index) => (
        <li
          class={index % 2 !== 0 ? "odd" : "even"}
          data-index={index}
          transition:name={`project-${project.id}`}
          style="view-transition-class: post"
        >
          <a href={`/posts/${project.id}`}>
            <img
              src={project.data.image.url}
              alt={project.data.image.alt}
              loading="lazy"
              width="100"
              transition:name={`project-image-${project.id}`}
            />
            <h3>{project.data.title}</h3>
            <p>{project.data.description}</p>
          </a>
        </li>
      ))
    }
  </ul>
  <div class="top-wrapper">
    <a href="/work" class="pill">View All Projects</a>
  </div>
</section>

<style>
  .hidden {
    visibility: hidden;
  }

  .show {
    visibility: visible;
  }

  section {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    padding: 2rem;
    width: 100%;
    max-width: 65rem;
    container: wrapper / inline-size;
  }

  .top-wrapper {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 1.5rem;
    align-items: center;
    background-color: var(--tertiary-light);
    border-radius: 10px;
  }

  .top-wrapper:first-of-type {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
  }

  .top-wrapper:first-of-type p.badge {
    font-size: 0.95rem;
    background-color: var(--tertiary);
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 20px;
    height: 2.5rem;
    min-width: 2.5rem;
    padding: 1rem;
    justify-self: end;
    align-self: center;
  }

  .top-wrapper:first-of-type p:last-of-type {
    grid-column: 1/3;
  }

  @container wrapper (width < 300px) {
    .top-wrapper:first-of-type {
      display: flex;
      flex-direction: column;
      align-items: start;

      & p.badge {
        align-self: flex-start;
      }
    }
  }

  ul.grid {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  @container wrapper (width > 37rem) {
    ul.grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
    }
  }


  li {
    display: flex;
    flex-direction: column;
    background-color: var(--white);
    border-radius: 12px;
    box-shadow:
      0px 8px 13px 0px rgba(0, 0, 0, 0.03),
      0px 12px 11px 0px rgba(0, 0, 0, 0.02),
      0px 8px 8px 0px rgba(0, 0, 0, 0.03),
      0px -3px 4px 0px rgba(0, 0, 0, 0.03);
    list-style: "";
    container-type: inline-size;
    container-name: grid;
    max-width: 32rem;
  }

  li a {
    height: 100%;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 1.5rem;
    text-decoration: none;
    border-radius: 12px;
  }

  h3 {
    font-family: var(--body-font);
    font-size: 1.35rem;
  }

  p {
    max-width: 30ch;
    letter-spacing: -0.25px;
  }

  img {
    align-self: center;
  }

  @container grid (width > 350px) {
    li a {
      display: grid;
      grid-template-columns: repeat(3, 1fr);

      & img {
        grid-column: 1/2;
        grid-row: 1/4;
      }

      & h3 {
        grid-column: 2/4;
      }

      & p {
        grid-column: 2/4;
      }
    }
  }

  .top-wrapper:has(a) {
    align-items: end;
  }

  @supports (animation-timeline: view()) {
    section, li {
      animation-timeline: view();
      animation-name: fade-in-out;
      animation-fill-mode: both;
      animation-range: entry 0% exit 100%;
    }

    @keyframes fade-in-out {
      0% {
        opacity: 0;
        transform: translateY(10rem);
      }
      25% {
        opacity: 1;
        transform: translateY(0);
      }
      90% {
        opacity: 1;
        scale: 1;
        transform: translateY(0);
      }
      100% {
        opacity: 0;
        scale: 0.8;
        transform: translateY(-10rem);
      }
    }
  }
</style>
