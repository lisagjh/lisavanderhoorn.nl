---
import { getCollection } from "astro:content";
const allPosts = (await getCollection("blog")).sort(
  (a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate)
);
---

<section id="blog" transition:name="blog">
  <div class="wrapper">
    <h2 class="pill" transition:name="blog-title">Blog</h2>
    <p class="badge">{allPosts.length} posts</p>
    <p transition:name="blog-text">
      Read some stuff! From talks at FDND to new stuff I'm learning.
    </p>
  </div>

  <ul class="grid">
    {
      allPosts.slice(0, 4).map((post) => (
        <li
          transition:name={`post-${post.id}`}
          style="view-transition-class: post"
        >
          <a
            href={`/blog/${post.id}`}
            transition:name={`post-content-${post.id}`}
            style="view-transition-class: post"
          >
            <h3
              transition:name={`title-${post.id}`}
              style="view-transition-class: post"
            >
              {post.data.title}
            </h3>
            <p
              transition:name={`description-${post.id}`}
              style="view-transition-class: post"
            >
              {post.data.description}
            </p>
          </a>
        </li>
      ))
    }
  </ul>

  <div class="bottom">
    <a href="/blog" class="pill">View All Posts</a>
  </div>
</section>

<style>
  section {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    padding: 2rem;
    width: 100%;
    max-width: 65rem;
    container: wrapper / inline-size;
  }

  .wrapper,
  .bottom {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 1.5rem;
    align-items: center;
    background-color: var(--primary-light);
    border-radius: 10px;
  }

  .wrapper {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
  }

  .wrapper p.badge {
    font-size: 0.95rem;
    color: var(--primary-lighter);
    background-color: var(--primary-dark);
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 20px;
    height: 2.5rem;
    min-width: 2.5rem;
    padding: 1rem;
    justify-self: end;
    align-self: center;
  }

  .bottom {
    align-items: end;
    margin-top: 1.5rem;
  }

  ul.grid {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 1.5rem;
  }

  li {
    background-color: var(--white);
    width: 100%;
    border-radius: 12px;
    box-shadow:
      0px 5px 8px 0px rgba(0, 0, 0, 0.03),
      0px 7px 6px 0px rgba(0, 0, 0, 0.02),
      0px 8px 8px 0px rgba(0, 0, 0, 0.03),
      0px -3px 4px 0px rgba(0, 0, 0, 0.03);
    list-style: "";
  }

  li a {
    display: flex;
    flex-direction: column;
    align-items: start;
    gap: 1rem;
    padding: 2rem;
    width: 100%;
    min-height: 14rem;
    height: 100%;
    max-height: 23rem;
    overflow-y: scroll;
    text-decoration: none;
  }

  h3 {
    font-family: var(--body-font);
    font-size: 1.35rem;
    max-width: 30ch;
  }

  p {
    max-width: 40ch;
  }

  @media (width >= 48rem) {
    ul.grid {
      flex-direction: row;
      justify-content: start;
      padding: 1rem 0.25rem;
      overflow-x: auto;
      scroll-snap-type: x mandatory;
      scroll-behavior: smooth;
      justify-self: center;
      align-self: center;
    }

    li {
      max-width: 80%;
      width: fit-content;
      scroll-snap-align: center;
      flex-shrink: 0;
    }
  }

  @supports (animation-timeline: view()) {
    section, li {
      animation-timeline: view();
      animation-name: fade-in-out;
      animation-fill-mode: both;
      animation-range: entry 0% exit 100%;
    }

    @keyframes fade-in-out {
      0% {
        opacity: 0;
        transform: translateY(10rem);
      }
      25% {
        opacity: 1;
        transform: translateY(0);
      }
      90% {
        opacity: 1;
        scale: 1;
        transform: translateY(0);
      }
      100% {
        opacity: 0;
        scale: 0.8;
        transform: translateY(-10rem);
      }
    }
  }

  /* css carousel version */
  @media (width >= 48rem) {
    ul.grid {
      anchor-name: --grid;
      scroll-marker-group: after;
      position: relative;
      scrollbar-width: none;

      &::scroll-marker-group {
        position: absolute;
        position-anchor: --grid;
        top: anchor(--grid bottom);
        justify-self: anchor-center;

        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        gap: 0.5rem;
      }

      li:hover {
        box-shadow: 0px 1px 10px 0px rgba(0, 0, 0, 0.1);
      }

      > li::scroll-marker {
        content: "" / "Scroll to post";
        background: url(/public/assets/svg/dot.svg);
        background-repeat: no-repeat;
        background-size: 70%;
        background-position: center;
        height: 2rem;
        width: 2rem;
        transform: rotate(calc(sibling-index() * 70deg));
        opacity: 0.65;
        transition: 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      }

      > li::scroll-marker:hover {
        scale: 1.025;
        opacity: 0.85;
      }

      > li::scroll-marker:target-current {
        opacity: 1;
        scale: 1.1;
      }

      &::scroll-button(*) {
        background-color: transparent;
        width: 3rem;
        height: 3rem;
        position: absolute;
        position-anchor: --grid;
        border: none;
        transition: 0.15s ease-in-out;
      }

      &::scroll-button(*):disabled {
        opacity: 0.5;
        pointer-events: none;
        cursor: not-allowed;
      }

      &::scroll-button(*):hover {
        scale: 1.05;
      }

      &::scroll-button(*):active {
        scale: 0.95;
      }

      &::scroll-button(left) {
        content: url(/public/assets/svg/arrow-left.svg) / "Scroll Left";

        top: anchor(--grid bottom);
        left: anchor(--grid left);
      }

      &::scroll-button(right) {
        content: url(/public/assets/svg/arrow-right.svg) / "Scroll Right";
        top: anchor(--grid bottom);
        right: anchor(--grid right);
      }

      &::scroll-button(*):focus-visible {
        outline-offset: 5px;
      }
    }

    /* scroll animation w shadow */
    ul.grid {
      scroll-timeline: --scroll-timeline x;
    }

    ul.grid::before,
    ul.grid::after {
      content: "";
      display: block;
      position: sticky;
      height: 100%;
    }

    ul.grid::before {
      top: 0;
      background: radial-gradient(
        farthest-side at 50% 0,
        rgb(0 0 0 / 0.25),
        rgb(0 0 0 / 0)
      );
    }

    ul.grid::after {
      bottom: 0;
      background: radial-gradient(
        farthest-side at 50% 100%,
        rgb(0 0 0 / 0.25),
        rgb(0 0 0 / 0)
      );
    }

    @keyframes reveal {
      0% {
        opacity: 0;
      }
      100% {
        opacity: 1;
      }
    }

    ul.grid::before,
    ul.grid::after {
      animation-name: reveal;
      animation-timeline: --scroll-timeline;
      animation-fill-mode: both;
    }
  }

  @media (prefers-reduce-motion: no-preference) {
    ul {
      overflow: hidden;
    }

    @keyframes animate-in {
      0% {
        opacity: 0;
        transform: translateY(100%);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @keyframes animate-out {
      0% {
        opacity: 1;
        transform: translateY(0);
      }
      100% {
        opacity: 0;
        transform: translateY(-100%);
      }
    }

    .grid li {
      animation:
        animate-in linear forwards,
        animate-out linear forwards;
      animation-timeline: view();
      animation-range: entry, exit;
    }
  }
</style>
