---
import Layout from "../../layouts/BaseLayout.astro";

import { getCollection } from "astro:content";

const allPosts = (await getCollection("blog")).sort(
  (a, b) => new Date(b.data.pubDate) - new Date(a.data.pubDate)
);
---

<Layout>
  <section class="wrapper" transition:name="blog">
    <button class="back" onclick="history.back()">Back Home</button>
    <h2 class="pill" transition:name="blog-title">Blog</h2>
    <p transition:name="blog-text">
      Read some stuff! From talks at FDND to new stuff I'm learning.
    </p>

    <ul class="grid">
      {
        allPosts.map((post, index) => (
          <li
            transition:name={`post-${post.id}`}
            data-index={index}
            style="view-transition-class: post"
          >
            <a href={`/blog/${post.id}`}>
              <h3 transition:name={`title-${post.id}`}>{post.data.title}</h3>
              <p transition:name={`description-${post.id}`}>
                {post.data.description}
              </p>

              <ul class="tags">
                {post.data.tags
                  .filter((tag) => tag !== "learning in public")
                  .map((tag) => (
                    <li class="tag">{tag}</li>
                  ))}
              </ul>
            </a>
          </li>
        ))
      }
    </ul>
  </section>
</Layout>

<script></script>

<style>
  ul.tags {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 0.75rem;
    height: 100%;
    align-items: end;
    margin-top: auto;
  }

  li.tag {
    background-color: var(--primary-lighter);
    font-size: 0.9rem;
    width: fit-content;
    padding: 0.5rem 0.75rem;
    box-shadow: none;
  }

  section {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding: 2rem;
    width: 80vw;
    max-width: 60rem;
    background-color: var(--primary-light);
    border-radius: 10px;
  }

  button.back {
    border-color: var(--primary-light);
  }

  button.back:hover {
    background: var(--primary-lighter);
  }

  h2 {
    text-align: start;
    font-size: 3.5rem;
  }

  ul.grid {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  @media (width >= 42rem) {
    ul.grid {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 1rem;
    }

    ul.grid li:nth-of-type(4n + 1) {
      grid-column: span 2;
    }

    ul.grid li:nth-of-type(4n + 2) {
      grid-column: 3 / 6;
    }

    ul.grid li:nth-of-type(4n + 3) {
      grid-column: 1 / 4;
    }

    ul.grid li:nth-of-type(4n + 4) {
      grid-column: 4/6;
    }
  }

  li {
    background-color: var(--white);
    border-radius: 12px;
    box-shadow:
      0px 8px 13px 0px rgba(0, 0, 0, 0.03),
      0px 12px 11px 0px rgba(0, 0, 0, 0.02),
      0px 8px 8px 0px rgba(0, 0, 0, 0.03),
      0px -3px 4px 0px rgba(0, 0, 0, 0.03);
    list-style: "";
  }

  li a {
    min-height: 100%;
    width: 100%;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 2rem;
    text-decoration: none;
  }

  li h3 {
    font-family: var(--body-font);
    font-size: 1.35rem;
  }

  li p {
    max-width: 30ch;
    font-size: 0.9rem;
    letter-spacing: -0.25px;
  }

  @media (prefers-reduce-motion: no-preference) {
    ul.grid li {
      --delay: calc((sibling-index() + 1) * 0.25s);
      animation: fade-slide-in-odd 0.75s var(--delay)
        cubic-bezier(0.175, 0.885, 0.32, 1.275) both;
    }

    @keyframes fade-slide-in {
      from {
        opacity: 0;
        transform: translateX(-5rem);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
  }

  @keyframes fade-slide-in {
    from {
      scale: 0.5;
      opacity: 0;
      transform: translateX(5rem) rotate(360deg);
    }
    to {
      scale: 1;
      opacity: 1;
      transform: translateX(0) rotate(0deg);
    }
  }

  ::view-transition-new(post-*) {
    animation: fade-slide-in 2s ease-in-out;
  }
</style>
