[["Map",1,2,9,10,98,99],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.4.3","content-config-digest","b31bc807b7b4caba","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://lisavanderhoorn.nl/\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","projects",["Map",11,12,26,44,27,71],"dda-scroll",{"id":11,"data":13,"body":30,"filePath":31,"digest":32,"rendered":33},{"id":14,"title":15,"date":16,"description":17,"image":18,"tags":21,"relatedPosts":25,"livesite":28,"notes":29},2,"DDA - 3D Scroll Animation","November 2024","Creative Spike focused on using your creativitiy to create a scroll driven animation.",{"url":19,"alt":20},"/work-showcase/dda-scroll.webp","Mockup of my creative spike focused on implementing scroll driven animations in the Dutch Digital Agencies website,",[22,23,24],"Sveltekit","FDND","ThreeJS",[26,27],"dda","dda-viewtransitions","https://spike-one-lisa.vercel.app/","This project uses an API that is still being used and worked on/with by other students. This means that this project may not work anymore.","At FDND, we had a special sprint where we got to let our creativity run free and build fun stuff, letting go of the styleguide of our client. Each week, we got a new random prompt focused on a new-ish technology.\n\nThis week we focused on scroll driven animations. My prompt was \u003Cem>Sad Acid Graphics Scroll Driven Animations\u003C/em>.\n\nI had already done CSS scroll driven animations plenty of times, so I decided to do something different. I began by researching the vibe of the prompt, by looking at images that represented this style. I found inspiration in wireframe shapes, grids, and black-and-white colors with bold, bright accents.\n\nAfter sketching a rough concept, I dove right into building. I chose Three.js to create a rotating wireframe donut. I had dabbled in Three.js earlier in the year, so I could reuse much of that knowledge. Once the shape was in place, I fine-tuned the animation. My first attempt was too fast and not smooth enough, so I added easing to give it a more fluid feel.\n\nI spent a lot of time tweaking the animation, experimenting with different speeds and effects, and even more time searching for the perfect font. After many hours of refining, I settled on a bold font and finalized the design.\n\nThe result was a scroll-driven animation with a rotating 3D object that embodied the gritty, acid-inspired aesthetic of the prompt. The challenge of optimizing performance, especially with Three.js, was rewarding, and it was a great opportunity to experiment with something outside of my usual design scope.\n\nI still love this project. It was a fun break from routine, a chance to push my skills, and a reminder of how endless the possibilities are with coding! It also inspired me to add something like this to my own website - hence the `three.js` shape on the home page.","src/content/projects/DDA-scroll.md","13c2b6d625cde2f5",{"html":34,"metadata":35},"\u003Cp>At FDND, we had a special sprint where we got to let our creativity run free and build fun stuff, letting go of the styleguide of our client. Each week, we got a new random prompt focused on a new-ish technology.\u003C/p>\n\u003Cp>This week we focused on scroll driven animations. My prompt was \u003Cem>Sad Acid Graphics Scroll Driven Animations\u003C/em>.\u003C/p>\n\u003Cp>I had already done CSS scroll driven animations plenty of times, so I decided to do something different. I began by researching the vibe of the prompt, by looking at images that represented this style. I found inspiration in wireframe shapes, grids, and black-and-white colors with bold, bright accents.\u003C/p>\n\u003Cp>After sketching a rough concept, I dove right into building. I chose Three.js to create a rotating wireframe donut. I had dabbled in Three.js earlier in the year, so I could reuse much of that knowledge. Once the shape was in place, I fine-tuned the animation. My first attempt was too fast and not smooth enough, so I added easing to give it a more fluid feel.\u003C/p>\n\u003Cp>I spent a lot of time tweaking the animation, experimenting with different speeds and effects, and even more time searching for the perfect font. After many hours of refining, I settled on a bold font and finalized the design.\u003C/p>\n\u003Cp>The result was a scroll-driven animation with a rotating 3D object that embodied the gritty, acid-inspired aesthetic of the prompt. The challenge of optimizing performance, especially with Three.js, was rewarding, and it was a great opportunity to experiment with something outside of my usual design scope.\u003C/p>\n\u003Cp>I still love this project. It was a fun break from routine, a chance to push my skills, and a reminder of how endless the possibilities are with coding! It also inspired me to add something like this to my own website - hence the \u003Ccode>three.js\u003C/code> shape on the home page.\u003C/p>",{"headings":36,"localImagePaths":37,"remoteImagePaths":38,"frontmatter":39,"imagePaths":43},[],[],[],{"id":14,"title":15,"date":16,"livesite":28,"description":17,"image":40,"notes":29,"tags":41,"relatedPosts":42},{"url":19,"alt":20},[22,23,24],[26,27],[],{"id":26,"data":45,"body":56,"filePath":57,"digest":58,"rendered":59},{"id":46,"title":47,"date":48,"description":49,"image":50,"tags":53,"relatedPosts":54,"livesite":55,"notes":29},1,"Dutch Digital Agencies","September 2024 - januari 2025","Redesign the DDA website - the dutch bond of digital agencies",{"url":51,"alt":52},"/work-showcase/dda-original.webp","Mockup of my project, the Dutch Digital Agencies website.",[22,23],[11,27],"https://dutchdigitalagencies.vercel.app/","During my final year at FDND, I worked on this project with two classmates. It was a collaboration with \u003Ca href=\"https://www.voorhoede.nl/nl/\">De Voorhoede\u003C/a>, who developed the actual new website for \u003Ca href=\"https://dutchdigitalagencies.com/\">Dutch Digital Agencies\u003C/a>. We had the chance to work directly with their team lead, Declan—an expert in his field. Each sprint review, he gave us valuable feedback, which really helped me grow as a developer.\n\nDeclan encouraged us to make some creative decisions of our own to improve the design, and I definitely took that opportunity. You can compare our version with the official one and see the differences—especially in the menu and the banner carousel on the homepage.\n\nOne of the biggest challenges was designing the banner carousel in a way that all logos would look good. Honestly, I still prefer our version over the real one, since some logos in the official design are barely visible.\n\nFor the menu, I chose to move it into a sidebar rather than keeping it in the header. In the original design, they kind of cheated by using a super small font-size (around 12px), which I wasn’t a fan of. I believe accessibility and readability come first, so I looked for a better solution.\n\nAlong with the sidebar, I added a `view-transition` on the active state to make axtive state animation smoother. I also implemented scroll-driven animations on the homepage for a more dynamic experience.\n\nThe project was built using SvelteKit, shortly after the release of Svelte 5. At the time, we were just starting to learn how to work with JavaScript frameworks—so jumping straight into the newest version of Svelte was both exciting and a little overwhelming. It meant a steep learning curve, a lot of trial and error, and frequent refactoring as we learned better ways to structure and write our code.\n\nThat said, it also gave us a great opportunity to dive into some of the latest features right away. We quickly started working with the new \"Runes Mode\", using `$state` and `$derived`, combined with things like `$effect()`. Looking back, it was quite challenging, but also super rewarding. I came out of it with more developed skills in problem solving and learning new skills.","src/content/projects/DDA.md","1e219a80f5c4bbfc",{"html":60,"metadata":61},"\u003Cp>During my final year at FDND, I worked on this project with two classmates. It was a collaboration with \u003Ca href=\"https://www.voorhoede.nl/nl/\">De Voorhoede\u003C/a>, who developed the actual new website for \u003Ca href=\"https://dutchdigitalagencies.com/\">Dutch Digital Agencies\u003C/a>. We had the chance to work directly with their team lead, Declan—an expert in his field. Each sprint review, he gave us valuable feedback, which really helped me grow as a developer.\u003C/p>\n\u003Cp>Declan encouraged us to make some creative decisions of our own to improve the design, and I definitely took that opportunity. You can compare our version with the official one and see the differences—especially in the menu and the banner carousel on the homepage.\u003C/p>\n\u003Cp>One of the biggest challenges was designing the banner carousel in a way that all logos would look good. Honestly, I still prefer our version over the real one, since some logos in the official design are barely visible.\u003C/p>\n\u003Cp>For the menu, I chose to move it into a sidebar rather than keeping it in the header. In the original design, they kind of cheated by using a super small font-size (around 12px), which I wasn’t a fan of. I believe accessibility and readability come first, so I looked for a better solution.\u003C/p>\n\u003Cp>Along with the sidebar, I added a \u003Ccode>view-transition\u003C/code> on the active state to make axtive state animation smoother. I also implemented scroll-driven animations on the homepage for a more dynamic experience.\u003C/p>\n\u003Cp>The project was built using SvelteKit, shortly after the release of Svelte 5. At the time, we were just starting to learn how to work with JavaScript frameworks—so jumping straight into the newest version of Svelte was both exciting and a little overwhelming. It meant a steep learning curve, a lot of trial and error, and frequent refactoring as we learned better ways to structure and write our code.\u003C/p>\n\u003Cp>That said, it also gave us a great opportunity to dive into some of the latest features right away. We quickly started working with the new “Runes Mode”, using \u003Ccode>$state\u003C/code> and \u003Ccode>$derived\u003C/code>, combined with things like \u003Ccode>$effect()\u003C/code>. Looking back, it was quite challenging, but also super rewarding. I came out of it with more developed skills in problem solving and learning new skills.\u003C/p>",{"headings":62,"localImagePaths":63,"remoteImagePaths":64,"frontmatter":65,"imagePaths":70},[],[],[],{"id":46,"title":47,"livesite":55,"date":48,"description":49,"bodyText":66,"image":67,"notes":29,"tags":68,"relatedPosts":69},"Labore esse in aute ipsum sint eu veniam. Consectetur nostrud Lorem mollit est ad. Officia eiusmod ea minim esse id voluptate. Pariatur non labore elit voluptate minim enim. Laboris quis nisi dolor veniam mollit tempor ea quis aliqua cupidatat anim reprehenderit. Exercitation velit cupidatat Lorem nostrud adipisicing eiusmod ut aliqua id anim ullamco tempor excepteur ut.",{"url":51,"alt":52},[22,23],[11,27],[],{"id":27,"data":72,"body":84,"filePath":85,"digest":86,"rendered":87},{"id":73,"title":74,"date":16,"description":75,"image":76,"tags":79,"relatedPosts":82,"livesite":83,"notes":29},3,"DDA - View Transition","Creative Spike focused on using your creativitiy to create a view transition.",{"url":77,"alt":78},"/work-showcase/dda-view.webp","Mockup of my creative spike focused on implementing view transitions in the Dutch Digital Agencies website,",[22,23,80,81],"P5js","View transitions",[26,11],"https://user-needs-ivory.vercel.app/","At FDND we had a special sprint where we got to let our creativity run free, build fun stuff, and let go of the styleguide of our client. Each week we got a new random prompt, focused on a certain new(-ish) feature or technology.\n\nThis week my prompt was \u003Cem>Glitzy Brutalist View Transitions\u003C/em>. I loved this prompt, since I have always been interested in brutalism, and instantly had some cool ideas of how to implement this into this website.\n\nI started out analysing the prompt. I did end up kind of ignoring the glitzy part, leaning into brutalism. So what does brutalism mean? In architecture it's raw materials, visible structure, and no unnecessary decorations. When you look at brutalism in webdesign, it tends to be mostly black and white, with one or two colors as accent, simple fonts, often big headings, minimal to no decorative elements.\n\nSo how do I translate this to a view transition? I decided to go big and bold, and created an interactive screen with `P5.js` and the \u003Ca href=\"https://p5-svelte.netlify.app/\">svelte library\u003C/a>. On their website,I saw \u003Ca href=\"https://p5-svelte.netlify.app/examples/wavemaker\">this\u003C/a> example and was inspired to create something similar, but with the text \"DDA\" - Dutch Digital Agencies.\n\nBefore diving into that, I wanted to understand how view transitions actually worked. I started small, adding an animated active state indicator to the menu item using the `::before` pseudo-element. To my surprise, it was super straightforward:\n\n```css\n.active::before {\n  view-transition-name: active-link;\n}\n```\n\nThat one line already gave me a nice animation between active links—way easier than I expected, and a fun first win before tackling the more complex stuff.\n\n\nOnce I got the hang of basic transitions, I deciced to dive into the transition I had in mind. I turned the interactive graphic into a component, and imported it in the `Layout.svelte`. Here I used a boolean variable called `isTransitioning` to toggle it's visibility during page transitions. This component fades in when a transition is happening, and fades out when it's done. It sits on top of everything with `position: fixed`. \n\nI used a boolean variable called `isTransitioning` to toggle its visibility during page transitions. This component fades in while a transition is happening and fades out when it’s done. It sits on top of everything using position: fixed.\n\n```html\n\u003Cdiv class=\"bg\" class:show-transition={isTransitioning}>\n  \u003CGraphic />\n\u003C/div>\n```\n\nAs you can see, the `show-transition` class gets applied when `isTransitioning = true`.\n\n```css\ndiv.bg {\n  position: fixed;\n  width: 110vw;\n  height: 110vh;\n  opacity: 0;\n  pointer-events: none;\n  transition: opacity 0.5s ease;\n}\n\ndiv.bg.show-transition {\n  opacity: 1;\n  pointer-events: auto;\n}\n```\n\nFor the page transitions themselves, I used the ::view-transition-old(root) and ::view-transition-new(root) selectors to define slide-in/out animations:\n\n```css\n@keyframes slide-out {\n  from { transform: translateX(0); opacity: 1; }\n  to   { transform: translateX(-20%); opacity: 0; }\n}\n\n@keyframes slide-in {\n  from { transform: translateX(20%); opacity: 0; }\n  to   { transform: translateX(0); opacity: 1; }\n}\n```\n\nThese gave the whole page a nice, smooth transition that felt deliberate and \"designed\". It turned out way better than I expected! \nThis is still one of my favourite projects I made in school. Definitely gonna make a cool transition screen for this website using this method.","src/content/projects/DDA-viewtransitions.md","52855b6f3bf3e108",{"html":88,"metadata":89},"\u003Cp>At FDND we had a special sprint where we got to let our creativity run free, build fun stuff, and let go of the styleguide of our client. Each week we got a new random prompt, focused on a certain new(-ish) feature or technology.\u003C/p>\n\u003Cp>This week my prompt was \u003Cem>Glitzy Brutalist View Transitions\u003C/em>. I loved this prompt, since I have always been interested in brutalism, and instantly had some cool ideas of how to implement this into this website.\u003C/p>\n\u003Cp>I started out analysing the prompt. I did end up kind of ignoring the glitzy part, leaning into brutalism. So what does brutalism mean? In architecture it’s raw materials, visible structure, and no unnecessary decorations. When you look at brutalism in webdesign, it tends to be mostly black and white, with one or two colors as accent, simple fonts, often big headings, minimal to no decorative elements.\u003C/p>\n\u003Cp>So how do I translate this to a view transition? I decided to go big and bold, and created an interactive screen with \u003Ccode>P5.js\u003C/code> and the \u003Ca href=\"https://p5-svelte.netlify.app/\">svelte library\u003C/a>. On their website,I saw \u003Ca href=\"https://p5-svelte.netlify.app/examples/wavemaker\">this\u003C/a> example and was inspired to create something similar, but with the text “DDA” - Dutch Digital Agencies.\u003C/p>\n\u003Cp>Before diving into that, I wanted to understand how view transitions actually worked. I started small, adding an animated active state indicator to the menu item using the \u003Ccode>::before\u003C/code> pseudo-element. To my surprise, it was super straightforward:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">.active::before\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  view-transition-name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: active-link;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>That one line already gave me a nice animation between active links—way easier than I expected, and a fun first win before tackling the more complex stuff.\u003C/p>\n\u003Cp>Once I got the hang of basic transitions, I deciced to dive into the transition I had in mind. I turned the interactive graphic into a component, and imported it in the \u003Ccode>Layout.svelte\u003C/code>. Here I used a boolean variable called \u003Ccode>isTransitioning\u003C/code> to toggle it’s visibility during page transitions. This component fades in when a transition is happening, and fades out when it’s done. It sits on top of everything with \u003Ccode>position: fixed\u003C/code>.\u003C/p>\n\u003Cp>I used a boolean variable called \u003Ccode>isTransitioning\u003C/code> to toggle its visibility during page transitions. This component fades in while a transition is happening and fades out when it’s done. It sits on top of everything using position: fixed.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"bg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> class:show-transition\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">{isTransitioning}\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\">Graphic\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As you can see, the \u003Ccode>show-transition\u003C/code> class gets applied when \u003Ccode>isTransitioning = true\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\">.bg\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  position\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">fixed\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">110\u003C/span>\u003Cspan style=\"color:#F97583\">vw\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  height\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">110\u003C/span>\u003Cspan style=\"color:#F97583\">vh\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  pointer-events\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">none\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  transition\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: opacity \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.5\u003C/span>\u003Cspan style=\"color:#F97583\">s\u003C/span>\u003Cspan style=\"color:#79B8FF\"> ease\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\">.bg.show-transition\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  pointer-events\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">auto\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For the page transitions themselves, I used the ::view-transition-old(root) and ::view-transition-new(root) selectors to define slide-in/out animations:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@keyframes\u003C/span>\u003Cspan style=\"color:#FFAB70\"> slide-out\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">transform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">translateX\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#79B8FF\">opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  to\u003C/span>\u003Cspan style=\"color:#E1E4E8\">   { \u003C/span>\u003Cspan style=\"color:#79B8FF\">transform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">translateX\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">-20\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#79B8FF\">opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@keyframes\u003C/span>\u003Cspan style=\"color:#FFAB70\"> slide-in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { \u003C/span>\u003Cspan style=\"color:#79B8FF\">transform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">translateX\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#79B8FF\">opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  to\u003C/span>\u003Cspan style=\"color:#E1E4E8\">   { \u003C/span>\u003Cspan style=\"color:#79B8FF\">transform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">translateX\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#79B8FF\">opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>These gave the whole page a nice, smooth transition that felt deliberate and “designed”. It turned out way better than I expected!\nThis is still one of my favourite projects I made in school. Definitely gonna make a cool transition screen for this website using this method.\u003C/p>",{"headings":90,"localImagePaths":91,"remoteImagePaths":92,"frontmatter":93,"imagePaths":97},[],[],[],{"id":73,"title":74,"date":16,"livesite":83,"description":75,"image":94,"notes":29,"tags":95,"relatedPosts":96},{"url":77,"alt":78},[22,23,80,81],[26,11],[],"blog",["Map",100,101],"blogpost-1",{"id":100,"data":102,"body":113,"filePath":114,"digest":115,"rendered":116},{"title":103,"pubDate":104,"description":105,"image":106,"tags":109},"JS Debouncing",["Date","2025-04-25T00:00:00.000Z"],"In deze post leg ik uit wat debouncing is en hoe ik het heb toegepast in een project tijdens mijn stage.",{"url":107,"alt":108},"https://docs.astro.build/assets/rose.webp","The Astro logo on a dark background with a pink glow.",[110,111,112],"JS","stage","learning in public","# Debouncing\n\nIn deze post leg ik uit wat debouncing is en hoe ik heb toegepast in een project tijdens mijn stage.\n\n## ComboBox.svelte\n\nDit component laat gebruikers een prijs range invoeren of selecteren, om alleen items te zien die binnen deze range vallen. De gebruiker kan ook alleen een minimale of maximale prijs invoeren.\n\nWanneer een gebruiker focust op een input veld, verschijnt de bijbehorende `\u003Cdiv>` met suggesties. Als in het andere input veld al een waarde geselecteerd is, krijg je hier alleen suggesties te zien die groter/kleiner zijn dan die waarde.\n\nIk heb bij dit component een debounce functie gebruikt om onnodige re-renders en errors te voorkomen.\n\n## Debounce\n\n### Wat is debouncing?\n\nDebouncing is een techniek waarbij een functie pas wordt uitgevoerd na een korte vertraging nadat de gebruiker stopt met typen. Dit voorkomt dat de functie telkens wordt aangeroepen tijdens het typen. Dit word vaak gebruikt bij searchbars of filters.\n\nIk gebruik in dit component debouncing om de filter logica pas uit te voeren nadat de gebruiker stopt met typen.\n\nDit is de debounce functie:\n\n```js\nlet debounceMinTimer;\nlet debounceMaxTimer;\n\nconst debounceMin = (value) => {\n  clearTimeout(debounceMinTimer); // Annuleer een eventuele vorige timer\n\n  debounceMinTimer = setTimeout(() => {\n    const numValue = Number(value);\n\n    if (selectedMaxValue && numValue >= 0 && numValue \u003C= selectedMaxValue) {\n      tempMinValue = numValue; // Bijwerken van de minimumwaarde\n      checkPriceValidity(); // Controleer of de prijzen geldig zijn\n    }\n  }, 500); // Debounce tijd van 500ms\n};\n\nconst debounceMax = (value) => {\n  clearTimeout(debounceMaxTimer); // Annuleer een eventuele vorige timer\n\n  debounceMaxTimer = setTimeout(() => {\n    const numValue = Number(value);\n\n    if (numValue >= tempMinValue) {\n      tempMaxValue = numValue; // Bijwerken van de maximumwaarde\n      checkPriceValidity(); // Controleer of de prijzen geldig zijn\n    }\n  }, 500); // Debounce tijd van 500ms\n};\n```\n\n### Hoe werkt debouncing?\n\nElke keer dat de gebruiker typt, wordt de vorige timer (als die bestaat) geannuleerd met `clearTimeout(debounceMinTimer)` of `clearTimeout(debounceMaxTimer)`. Dit voorkomt dat de filter functie te vaak wordt uitgevoerd.\n\nDaarna word een nieuwe timer ingesteld, die na 500ms de filterfunctie uitvoert. Dit betekent dat de filtering pas plaatsvindt als de gebruik een halve seconde niks heeft ingevoerd in het input veld. Dit wordt aangeroepen op de `\u003Cinput>` met `onkeyup`:\n\n`onkeyup={(e) => debounceMin(e.target.value)}`\n\nDus een halve seconde nadat de gebruiker een toets omhoog laat komen, wordt de filtering uitgevoerd.\n\nHierna wordt gecontroleerd of de ingevoerde minimum- en maximumprijs een geldige range zijn. De maximum prijs mag niet kleiner zijn dan de minimum prijs, en andersom.\n\n### Waarom heb ik het gebruikt?\n\nIk heb hier debouncing gebruikt, omdat wanneer ik begon met typen, de getypte waarde meteen vergeleken werd met de geselecteerde minimum prijs. Dus als ik €1000 geselecteerd heb voor de minimum prijs, en €5000 wil typen voor de maximum prijs, kreeg ik al een error na het typen van 5. Als deze error eenmaal in beeld kwam, zat ik vast. Wat ik verder type werd niet meer geupdate, ik kon de filter niet resetten, en moest de pagina refreshen om het opnieuw te proberen. Hier zou een gebruiker dus vast zitten.\n\nDit is geen gebruiksvriendelijke ervaring. Daarnaast werd de functie hier constant aangeroepen, wat voor overbodige re-renders zou kunnen zorgen, wat de performance zou kunnen beïnvloeden.\n\nIn [deze issue](https://github.com/users/lisagjh/projects/13/views/14?pane=issue&itemId=106915336&issue=lisagjh%7Ci-love-web%7C211) heb ik het voor het eerst toegepast, en in [deze issue](https://github.com/users/lisagjh/projects/13/views/14?pane=issue&itemId=107444261&issue=lisagjh%7Ci-love-web%7C215) heb ik de debouncing iets verbeterd. [Hier](https://svelte.dev/playground/f55e23d0bf4b43b1a221cf8b88ef9904?version=5.27.1#H4sIAAAAAAAAE22OTWrDMBCFrzLMJjaYxt0qtiFQeoLuqi4Ue1JE5bGxRm6D0N2LnJp20eX73g8vIpuRUOETXabAPcFz4MGMxGKcxwqv1pFH9RpRbnMOZoDVXjvP84NfyUlmF-PpP95PLMTiUWHj-8XO0mnW4khgNa49HE67FDvSkhVr6Sf2AsP-q4UV2g5itrT0jszyYkeaghRbqzzdnU1AC55k94vyT1PLalxe-8mnCh7rur7Xk-bm-HuRG8tzEJhYfdAtzG0sIohZ3kkUxHw-ECRI2_7-tNhwmeDYaY6rcQkrFPoSVLIESm8VirHu0_KA6mqcp_QNViAcLIYBAAA=) kan je een duidelijk en kort voorbeeld van debouncing in Svelte zien.\n\n## Conclusie\n\nDe debouncing techniek zorgt hier voor een fijne gebruikerservaring. Door de filtering pas uit te voeren nadat de gebruiker stopt met typen, worden onnodige herberekingen en re-renders voorkomen, en word er voorkomen dat de gebruiker vast komt te zitten op een error die te vroeg in beeld komt.","src/content/blog/blogpost-1.md","32ffa468fa7de82e",{"html":117,"metadata":118},"\u003Ch1 id=\"debouncing\">Debouncing\u003C/h1>\n\u003Cp>In deze post leg ik uit wat debouncing is en hoe ik heb toegepast in een project tijdens mijn stage.\u003C/p>\n\u003Ch2 id=\"comboboxsvelte\">ComboBox.svelte\u003C/h2>\n\u003Cp>Dit component laat gebruikers een prijs range invoeren of selecteren, om alleen items te zien die binnen deze range vallen. De gebruiker kan ook alleen een minimale of maximale prijs invoeren.\u003C/p>\n\u003Cp>Wanneer een gebruiker focust op een input veld, verschijnt de bijbehorende \u003Ccode>&#x3C;div>\u003C/code> met suggesties. Als in het andere input veld al een waarde geselecteerd is, krijg je hier alleen suggesties te zien die groter/kleiner zijn dan die waarde.\u003C/p>\n\u003Cp>Ik heb bij dit component een debounce functie gebruikt om onnodige re-renders en errors te voorkomen.\u003C/p>\n\u003Ch2 id=\"debounce\">Debounce\u003C/h2>\n\u003Ch3 id=\"wat-is-debouncing\">Wat is debouncing?\u003C/h3>\n\u003Cp>Debouncing is een techniek waarbij een functie pas wordt uitgevoerd na een korte vertraging nadat de gebruiker stopt met typen. Dit voorkomt dat de functie telkens wordt aangeroepen tijdens het typen. Dit word vaak gebruikt bij searchbars of filters.\u003C/p>\n\u003Cp>Ik gebruik in dit component debouncing om de filter logica pas uit te voeren nadat de gebruiker stopt met typen.\u003C/p>\n\u003Cp>Dit is de debounce functie:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> debounceMinTimer;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> debounceMaxTimer;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> debounceMin\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  clearTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(debounceMinTimer); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Annuleer een eventuele vorige timer\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  debounceMinTimer \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> setTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> numValue\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (selectedMaxValue \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> numValue \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> numValue \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> selectedMaxValue) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      tempMinValue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> numValue; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Bijwerken van de minimumwaarde\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      checkPriceValidity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Controleer of de prijzen geldig zijn\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, \u003C/span>\u003Cspan style=\"color:#79B8FF\">500\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Debounce tijd van 500ms\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> debounceMax\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  clearTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(debounceMaxTimer); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Annuleer een eventuele vorige timer\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  debounceMaxTimer \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> setTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> numValue\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (numValue \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> tempMinValue) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      tempMaxValue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> numValue; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Bijwerken van de maximumwaarde\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      checkPriceValidity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Controleer of de prijzen geldig zijn\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, \u003C/span>\u003Cspan style=\"color:#79B8FF\">500\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Debounce tijd van 500ms\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"hoe-werkt-debouncing\">Hoe werkt debouncing?\u003C/h3>\n\u003Cp>Elke keer dat de gebruiker typt, wordt de vorige timer (als die bestaat) geannuleerd met \u003Ccode>clearTimeout(debounceMinTimer)\u003C/code> of \u003Ccode>clearTimeout(debounceMaxTimer)\u003C/code>. Dit voorkomt dat de filter functie te vaak wordt uitgevoerd.\u003C/p>\n\u003Cp>Daarna word een nieuwe timer ingesteld, die na 500ms de filterfunctie uitvoert. Dit betekent dat de filtering pas plaatsvindt als de gebruik een halve seconde niks heeft ingevoerd in het input veld. Dit wordt aangeroepen op de \u003Ccode>&#x3C;input>\u003C/code> met \u003Ccode>onkeyup\u003C/code>:\u003C/p>\n\u003Cp>\u003Ccode>onkeyup={(e) => debounceMin(e.target.value)}\u003C/code>\u003C/p>\n\u003Cp>Dus een halve seconde nadat de gebruiker een toets omhoog laat komen, wordt de filtering uitgevoerd.\u003C/p>\n\u003Cp>Hierna wordt gecontroleerd of de ingevoerde minimum- en maximumprijs een geldige range zijn. De maximum prijs mag niet kleiner zijn dan de minimum prijs, en andersom.\u003C/p>\n\u003Ch3 id=\"waarom-heb-ik-het-gebruikt\">Waarom heb ik het gebruikt?\u003C/h3>\n\u003Cp>Ik heb hier debouncing gebruikt, omdat wanneer ik begon met typen, de getypte waarde meteen vergeleken werd met de geselecteerde minimum prijs. Dus als ik €1000 geselecteerd heb voor de minimum prijs, en €5000 wil typen voor de maximum prijs, kreeg ik al een error na het typen van 5. Als deze error eenmaal in beeld kwam, zat ik vast. Wat ik verder type werd niet meer geupdate, ik kon de filter niet resetten, en moest de pagina refreshen om het opnieuw te proberen. Hier zou een gebruiker dus vast zitten.\u003C/p>\n\u003Cp>Dit is geen gebruiksvriendelijke ervaring. Daarnaast werd de functie hier constant aangeroepen, wat voor overbodige re-renders zou kunnen zorgen, wat de performance zou kunnen beïnvloeden.\u003C/p>\n\u003Cp>In \u003Ca href=\"https://github.com/users/lisagjh/projects/13/views/14?pane=issue&#x26;itemId=106915336&#x26;issue=lisagjh%7Ci-love-web%7C211\">deze issue\u003C/a> heb ik het voor het eerst toegepast, en in \u003Ca href=\"https://github.com/users/lisagjh/projects/13/views/14?pane=issue&#x26;itemId=107444261&#x26;issue=lisagjh%7Ci-love-web%7C215\">deze issue\u003C/a> heb ik de debouncing iets verbeterd. \u003Ca href=\"https://svelte.dev/playground/f55e23d0bf4b43b1a221cf8b88ef9904?version=5.27.1#H4sIAAAAAAAAE22OTWrDMBCFrzLMJjaYxt0qtiFQeoLuqi4Ue1JE5bGxRm6D0N2LnJp20eX73g8vIpuRUOETXabAPcFz4MGMxGKcxwqv1pFH9RpRbnMOZoDVXjvP84NfyUlmF-PpP95PLMTiUWHj-8XO0mnW4khgNa49HE67FDvSkhVr6Sf2AsP-q4UV2g5itrT0jszyYkeaghRbqzzdnU1AC55k94vyT1PLalxe-8mnCh7rur7Xk-bm-HuRG8tzEJhYfdAtzG0sIohZ3kkUxHw-ECRI2_7-tNhwmeDYaY6rcQkrFPoSVLIESm8VirHu0_KA6mqcp_QNViAcLIYBAAA=\">Hier\u003C/a> kan je een duidelijk en kort voorbeeld van debouncing in Svelte zien.\u003C/p>\n\u003Ch2 id=\"conclusie\">Conclusie\u003C/h2>\n\u003Cp>De debouncing techniek zorgt hier voor een fijne gebruikerservaring. Door de filtering pas uit te voeren nadat de gebruiker stopt met typen, worden onnodige herberekingen en re-renders voorkomen, en word er voorkomen dat de gebruiker vast komt te zitten op een error die te vroeg in beeld komt.\u003C/p>",{"headings":119,"localImagePaths":141,"remoteImagePaths":142,"frontmatter":143,"imagePaths":147},[120,123,126,129,132,135,138],{"depth":46,"slug":121,"text":122},"debouncing","Debouncing",{"depth":14,"slug":124,"text":125},"comboboxsvelte","ComboBox.svelte",{"depth":14,"slug":127,"text":128},"debounce","Debounce",{"depth":73,"slug":130,"text":131},"wat-is-debouncing","Wat is debouncing?",{"depth":73,"slug":133,"text":134},"hoe-werkt-debouncing","Hoe werkt debouncing?",{"depth":73,"slug":136,"text":137},"waarom-heb-ik-het-gebruikt","Waarom heb ik het gebruikt?",{"depth":14,"slug":139,"text":140},"conclusie","Conclusie",[],[],{"title":103,"pubDate":144,"description":105,"image":145,"tags":146},["Date","2025-04-25T00:00:00.000Z"],{"url":107,"alt":108},[110,111,112],[]]