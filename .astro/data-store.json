[["Map",1,2,9,10,427,428],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.4.3","content-config-digest","de80d3494fe60fb4","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://lisavanderhoorn.nl/\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,55,56,101,102,113,136,203,204,216,249,217,283,114,323],"emotional-interface",{"id":11,"data":13,"body":23,"filePath":24,"digest":25,"rendered":26},{"id":14,"title":15,"pubDate":16,"description":17,"tags":18,"lang":22},5,"Emotional Interface",["Date","2025-05-23T00:00:00.000Z"],"Kalok Yeung verteld over emotional interface, wat het is en hoe je dit kan bouwen.",[19,20,21],"we love web","design","learning in public","nl","[Kalok Yeung](https://kalokyeung.com/ \"https://kalokyeung.com/\")\n\n- Freelance Creative Director / Designer\n\n# Emotional Interface\n\nHet stofje wat vrij komt in je lichaam wanneer je geluk ervaart, het is het gelukshormoon. Hoe zorg je dat gebruikers oxytocine krijgen van jouw website?\n\n## How to digitally bond?\n\n### Soft UI\n\n- telepathic, synthezizer: veel ronde vormen, oogt lief,\n- 2: witruimte, subtieler, ronde hoeken, op kleine details ronde hoeken\n- suupaa: speelser, webgl en 3d, ronde hoeken, zachte gradient in de bg,\n\n### Motion\n\ntransities, hover states, animaties, etc. Het moet wat toevoegen aan de experience, niet als decoratie, tenzij het bijdraagt aan de brand. Heeft een motief nodig.\n\n- Seen: speels met soft ui, animaties en transities\n- Owl: UX constructie, hergebruiken van elementen, blijft hangen\n- 3: intro animatie, overgang van ene element naar andere element, vloeiende overgang, soft ui\n- dolly: interessante UX op video player met kleine details, transition delay -> physics\n- 5: subtiel, klein, clean\n\n### Sound\n\nUnderused. Branding\n\n- Seen: kleine geluidjes bij klikken\n- ONE: geluidjes op scroll, verplaatsen van active state in ul/li\n- JazzKeys: geluid op basis van wat je intikt\n- Ezekiel Aquino: piano keys\n\n### Content\n\nBinden door middel van content\n\n- Seen: geen grote lappen tekst, maar als berichten op telefoon, natuurlijke uitwisseling\n- Filter: gepersonaliseerd, conversational interface.\n- Parallel: andere manier van visualiseren,","src/content/blog/emotional-interface.md","f09a07f597537e8d",{"html":27,"metadata":28},"\u003Cp>\u003Ca href=\"https://kalokyeung.com/\" title=\"https://kalokyeung.com/\">Kalok Yeung\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>Freelance Creative Director / Designer\u003C/li>\n\u003C/ul>\n\u003Ch1 id=\"emotional-interface\">Emotional Interface\u003C/h1>\n\u003Cp>Het stofje wat vrij komt in je lichaam wanneer je geluk ervaart, het is het gelukshormoon. Hoe zorg je dat gebruikers oxytocine krijgen van jouw website?\u003C/p>\n\u003Ch2 id=\"how-to-digitally-bond\">How to digitally bond?\u003C/h2>\n\u003Ch3 id=\"soft-ui\">Soft UI\u003C/h3>\n\u003Cul>\n\u003Cli>telepathic, synthezizer: veel ronde vormen, oogt lief,\u003C/li>\n\u003Cli>2: witruimte, subtieler, ronde hoeken, op kleine details ronde hoeken\u003C/li>\n\u003Cli>suupaa: speelser, webgl en 3d, ronde hoeken, zachte gradient in de bg,\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"motion\">Motion\u003C/h3>\n\u003Cp>transities, hover states, animaties, etc. Het moet wat toevoegen aan de experience, niet als decoratie, tenzij het bijdraagt aan de brand. Heeft een motief nodig.\u003C/p>\n\u003Cul>\n\u003Cli>Seen: speels met soft ui, animaties en transities\u003C/li>\n\u003Cli>Owl: UX constructie, hergebruiken van elementen, blijft hangen\u003C/li>\n\u003Cli>3: intro animatie, overgang van ene element naar andere element, vloeiende overgang, soft ui\u003C/li>\n\u003Cli>dolly: interessante UX op video player met kleine details, transition delay -> physics\u003C/li>\n\u003Cli>5: subtiel, klein, clean\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"sound\">Sound\u003C/h3>\n\u003Cp>Underused. Branding\u003C/p>\n\u003Cul>\n\u003Cli>Seen: kleine geluidjes bij klikken\u003C/li>\n\u003Cli>ONE: geluidjes op scroll, verplaatsen van active state in ul/li\u003C/li>\n\u003Cli>JazzKeys: geluid op basis van wat je intikt\u003C/li>\n\u003Cli>Ezekiel Aquino: piano keys\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"content\">Content\u003C/h3>\n\u003Cp>Binden door middel van content\u003C/p>\n\u003Cul>\n\u003Cli>Seen: geen grote lappen tekst, maar als berichten op telefoon, natuurlijke uitwisseling\u003C/li>\n\u003Cli>Filter: gepersonaliseerd, conversational interface.\u003C/li>\n\u003Cli>Parallel: andere manier van visualiseren,\u003C/li>\n\u003C/ul>",{"headings":29,"localImagePaths":49,"remoteImagePaths":50,"frontmatter":51,"imagePaths":54},[30,32,36,40,43,46],{"depth":31,"slug":11,"text":15},1,{"depth":33,"slug":34,"text":35},2,"how-to-digitally-bond","How to digitally bond?",{"depth":37,"slug":38,"text":39},3,"soft-ui","Soft UI",{"depth":37,"slug":41,"text":42},"motion","Motion",{"depth":37,"slug":44,"text":45},"sound","Sound",{"depth":37,"slug":47,"text":48},"content","Content",[],[],{"id":14,"title":15,"pubDate":52,"description":17,"tags":53,"lang":22},["Date","2025-05-23T00:00:00.000Z"],[19,20,21],[],"debounce",{"id":55,"data":57,"body":67,"filePath":68,"digest":69,"rendered":70},{"id":31,"title":58,"pubDate":59,"description":60,"image":61,"tags":64,"lang":22},"JS Debouncing",["Date","2025-04-25T00:00:00.000Z"],"In deze post leg ik uit wat debouncing is en hoe ik het heb toegepast in een project tijdens mijn stage.",{"url":62,"alt":63},"https://docs.astro.build/assets/rose.webp","The Astro logo on a dark background with a pink glow.",[65,66,21],"JS","stage","# Debouncing\n\nIn deze post leg ik uit wat debouncing is en hoe ik heb toegepast in een project tijdens mijn stage.\n\n## ComboBox.svelte\n\nDit component laat gebruikers een prijs range invoeren of selecteren, om alleen items te zien die binnen deze range vallen. De gebruiker kan ook alleen een minimale of maximale prijs invoeren.\n\nWanneer een gebruiker focust op een input veld, verschijnt de bijbehorende `\u003Cdiv>` met suggesties. Als in het andere input veld al een waarde geselecteerd is, krijg je hier alleen suggesties te zien die groter/kleiner zijn dan die waarde.\n\nIk heb bij dit component een debounce functie gebruikt om onnodige re-renders en errors te voorkomen.\n\n## Debounce\n\n### Wat is debouncing?\n\nDebouncing is een techniek waarbij een functie pas wordt uitgevoerd na een korte vertraging nadat de gebruiker stopt met typen. Dit voorkomt dat de functie telkens wordt aangeroepen tijdens het typen. Dit word vaak gebruikt bij searchbars of filters.\n\nIk gebruik in dit component debouncing om de filter logica pas uit te voeren nadat de gebruiker stopt met typen.\n\nDit is de debounce functie:\n\n```js\nlet debounceMinTimer;\nlet debounceMaxTimer;\n\nconst debounceMin = (value) => {\n  clearTimeout(debounceMinTimer); // Annuleer een eventuele vorige timer\n\n  debounceMinTimer = setTimeout(() => {\n    const numValue = Number(value);\n\n    if (selectedMaxValue && numValue >= 0 && numValue \u003C= selectedMaxValue) {\n      tempMinValue = numValue; // Bijwerken van de minimumwaarde\n      checkPriceValidity(); // Controleer of de prijzen geldig zijn\n    }\n  }, 500); // Debounce tijd van 500ms\n};\n\nconst debounceMax = (value) => {\n  clearTimeout(debounceMaxTimer); // Annuleer een eventuele vorige timer\n\n  debounceMaxTimer = setTimeout(() => {\n    const numValue = Number(value);\n\n    if (numValue >= tempMinValue) {\n      tempMaxValue = numValue; // Bijwerken van de maximumwaarde\n      checkPriceValidity(); // Controleer of de prijzen geldig zijn\n    }\n  }, 500); // Debounce tijd van 500ms\n};\n```\n\n### Hoe werkt debouncing?\n\nElke keer dat de gebruiker typt, wordt de vorige timer (als die bestaat) geannuleerd met `clearTimeout(debounceMinTimer)` of `clearTimeout(debounceMaxTimer)`. Dit voorkomt dat de filter functie te vaak wordt uitgevoerd.\n\nDaarna word een nieuwe timer ingesteld, die na 500ms de filterfunctie uitvoert. Dit betekent dat de filtering pas plaatsvindt als de gebruik een halve seconde niks heeft ingevoerd in het input veld. Dit wordt aangeroepen op de `\u003Cinput>` met `onkeyup`:\n\n`onkeyup={(e) => debounceMin(e.target.value)}`\n\nDus een halve seconde nadat de gebruiker een toets omhoog laat komen, wordt de filtering uitgevoerd.\n\nHierna wordt gecontroleerd of de ingevoerde minimum- en maximumprijs een geldige range zijn. De maximum prijs mag niet kleiner zijn dan de minimum prijs, en andersom.\n\n### Waarom heb ik het gebruikt?\n\nIk heb hier debouncing gebruikt, omdat wanneer ik begon met typen, de getypte waarde meteen vergeleken werd met de geselecteerde minimum prijs. Dus als ik €1000 geselecteerd heb voor de minimum prijs, en €5000 wil typen voor de maximum prijs, kreeg ik al een error na het typen van 5. Als deze error eenmaal in beeld kwam, zat ik vast. Wat ik verder type werd niet meer geupdate, ik kon de filter niet resetten, en moest de pagina refreshen om het opnieuw te proberen. Hier zou een gebruiker dus vast zitten.\n\nDit is geen gebruiksvriendelijke ervaring. Daarnaast werd de functie hier constant aangeroepen, wat voor overbodige re-renders zou kunnen zorgen, wat de performance zou kunnen beïnvloeden.\n\nIn [deze issue](https://github.com/users/lisagjh/projects/13/views/14?pane=issue&itemId=106915336&issue=lisagjh%7Ci-love-web%7C211) heb ik het voor het eerst toegepast, en in [deze issue](https://github.com/users/lisagjh/projects/13/views/14?pane=issue&itemId=107444261&issue=lisagjh%7Ci-love-web%7C215) heb ik de debouncing iets verbeterd. [Hier](https://svelte.dev/playground/f55e23d0bf4b43b1a221cf8b88ef9904?version=5.27.1#H4sIAAAAAAAAE22OTWrDMBCFrzLMJjaYxt0qtiFQeoLuqi4Ue1JE5bGxRm6D0N2LnJp20eX73g8vIpuRUOETXabAPcFz4MGMxGKcxwqv1pFH9RpRbnMOZoDVXjvP84NfyUlmF-PpP95PLMTiUWHj-8XO0mnW4khgNa49HE67FDvSkhVr6Sf2AsP-q4UV2g5itrT0jszyYkeaghRbqzzdnU1AC55k94vyT1PLalxe-8mnCh7rur7Xk-bm-HuRG8tzEJhYfdAtzG0sIohZ3kkUxHw-ECRI2_7-tNhwmeDYaY6rcQkrFPoSVLIESm8VirHu0_KA6mqcp_QNViAcLIYBAAA=) kan je een duidelijk en kort voorbeeld van debouncing in Svelte zien.\n\n## Conclusie\n\nDe debouncing techniek zorgt hier voor een fijne gebruikerservaring. Door de filtering pas uit te voeren nadat de gebruiker stopt met typen, worden onnodige herberekingen en re-renders voorkomen, en word er voorkomen dat de gebruiker vast komt te zitten op een error die te vroeg in beeld komt.","src/content/blog/debounce.md","453482d9c1afbecc",{"html":71,"metadata":72},"\u003Ch1 id=\"debouncing\">Debouncing\u003C/h1>\n\u003Cp>In deze post leg ik uit wat debouncing is en hoe ik heb toegepast in een project tijdens mijn stage.\u003C/p>\n\u003Ch2 id=\"comboboxsvelte\">ComboBox.svelte\u003C/h2>\n\u003Cp>Dit component laat gebruikers een prijs range invoeren of selecteren, om alleen items te zien die binnen deze range vallen. De gebruiker kan ook alleen een minimale of maximale prijs invoeren.\u003C/p>\n\u003Cp>Wanneer een gebruiker focust op een input veld, verschijnt de bijbehorende \u003Ccode>&#x3C;div>\u003C/code> met suggesties. Als in het andere input veld al een waarde geselecteerd is, krijg je hier alleen suggesties te zien die groter/kleiner zijn dan die waarde.\u003C/p>\n\u003Cp>Ik heb bij dit component een debounce functie gebruikt om onnodige re-renders en errors te voorkomen.\u003C/p>\n\u003Ch2 id=\"debounce\">Debounce\u003C/h2>\n\u003Ch3 id=\"wat-is-debouncing\">Wat is debouncing?\u003C/h3>\n\u003Cp>Debouncing is een techniek waarbij een functie pas wordt uitgevoerd na een korte vertraging nadat de gebruiker stopt met typen. Dit voorkomt dat de functie telkens wordt aangeroepen tijdens het typen. Dit word vaak gebruikt bij searchbars of filters.\u003C/p>\n\u003Cp>Ik gebruik in dit component debouncing om de filter logica pas uit te voeren nadat de gebruiker stopt met typen.\u003C/p>\n\u003Cp>Dit is de debounce functie:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> debounceMinTimer;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> debounceMaxTimer;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> debounceMin\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  clearTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(debounceMinTimer); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Annuleer een eventuele vorige timer\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  debounceMinTimer \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> setTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> numValue\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (selectedMaxValue \u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> numValue \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> numValue \u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> selectedMaxValue) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      tempMinValue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> numValue; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Bijwerken van de minimumwaarde\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      checkPriceValidity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Controleer of de prijzen geldig zijn\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, \u003C/span>\u003Cspan style=\"color:#79B8FF\">500\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Debounce tijd van 500ms\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> debounceMax\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#FFAB70\">value\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  clearTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(debounceMaxTimer); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Annuleer een eventuele vorige timer\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  debounceMaxTimer \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> setTimeout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(() \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> numValue\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> Number\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(value);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (numValue \u003C/span>\u003Cspan style=\"color:#F97583\">>=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> tempMinValue) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      tempMaxValue \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> numValue; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Bijwerken van de maximumwaarde\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">      checkPriceValidity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Controleer of de prijzen geldig zijn\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }, \u003C/span>\u003Cspan style=\"color:#79B8FF\">500\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Debounce tijd van 500ms\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"hoe-werkt-debouncing\">Hoe werkt debouncing?\u003C/h3>\n\u003Cp>Elke keer dat de gebruiker typt, wordt de vorige timer (als die bestaat) geannuleerd met \u003Ccode>clearTimeout(debounceMinTimer)\u003C/code> of \u003Ccode>clearTimeout(debounceMaxTimer)\u003C/code>. Dit voorkomt dat de filter functie te vaak wordt uitgevoerd.\u003C/p>\n\u003Cp>Daarna word een nieuwe timer ingesteld, die na 500ms de filterfunctie uitvoert. Dit betekent dat de filtering pas plaatsvindt als de gebruik een halve seconde niks heeft ingevoerd in het input veld. Dit wordt aangeroepen op de \u003Ccode>&#x3C;input>\u003C/code> met \u003Ccode>onkeyup\u003C/code>:\u003C/p>\n\u003Cp>\u003Ccode>onkeyup={(e) => debounceMin(e.target.value)}\u003C/code>\u003C/p>\n\u003Cp>Dus een halve seconde nadat de gebruiker een toets omhoog laat komen, wordt de filtering uitgevoerd.\u003C/p>\n\u003Cp>Hierna wordt gecontroleerd of de ingevoerde minimum- en maximumprijs een geldige range zijn. De maximum prijs mag niet kleiner zijn dan de minimum prijs, en andersom.\u003C/p>\n\u003Ch3 id=\"waarom-heb-ik-het-gebruikt\">Waarom heb ik het gebruikt?\u003C/h3>\n\u003Cp>Ik heb hier debouncing gebruikt, omdat wanneer ik begon met typen, de getypte waarde meteen vergeleken werd met de geselecteerde minimum prijs. Dus als ik €1000 geselecteerd heb voor de minimum prijs, en €5000 wil typen voor de maximum prijs, kreeg ik al een error na het typen van 5. Als deze error eenmaal in beeld kwam, zat ik vast. Wat ik verder type werd niet meer geupdate, ik kon de filter niet resetten, en moest de pagina refreshen om het opnieuw te proberen. Hier zou een gebruiker dus vast zitten.\u003C/p>\n\u003Cp>Dit is geen gebruiksvriendelijke ervaring. Daarnaast werd de functie hier constant aangeroepen, wat voor overbodige re-renders zou kunnen zorgen, wat de performance zou kunnen beïnvloeden.\u003C/p>\n\u003Cp>In \u003Ca href=\"https://github.com/users/lisagjh/projects/13/views/14?pane=issue&#x26;itemId=106915336&#x26;issue=lisagjh%7Ci-love-web%7C211\">deze issue\u003C/a> heb ik het voor het eerst toegepast, en in \u003Ca href=\"https://github.com/users/lisagjh/projects/13/views/14?pane=issue&#x26;itemId=107444261&#x26;issue=lisagjh%7Ci-love-web%7C215\">deze issue\u003C/a> heb ik de debouncing iets verbeterd. \u003Ca href=\"https://svelte.dev/playground/f55e23d0bf4b43b1a221cf8b88ef9904?version=5.27.1#H4sIAAAAAAAAE22OTWrDMBCFrzLMJjaYxt0qtiFQeoLuqi4Ue1JE5bGxRm6D0N2LnJp20eX73g8vIpuRUOETXabAPcFz4MGMxGKcxwqv1pFH9RpRbnMOZoDVXjvP84NfyUlmF-PpP95PLMTiUWHj-8XO0mnW4khgNa49HE67FDvSkhVr6Sf2AsP-q4UV2g5itrT0jszyYkeaghRbqzzdnU1AC55k94vyT1PLalxe-8mnCh7rur7Xk-bm-HuRG8tzEJhYfdAtzG0sIohZ3kkUxHw-ECRI2_7-tNhwmeDYaY6rcQkrFPoSVLIESm8VirHu0_KA6mqcp_QNViAcLIYBAAA=\">Hier\u003C/a> kan je een duidelijk en kort voorbeeld van debouncing in Svelte zien.\u003C/p>\n\u003Ch2 id=\"conclusie\">Conclusie\u003C/h2>\n\u003Cp>De debouncing techniek zorgt hier voor een fijne gebruikerservaring. Door de filtering pas uit te voeren nadat de gebruiker stopt met typen, worden onnodige herberekingen en re-renders voorkomen, en word er voorkomen dat de gebruiker vast komt te zitten op een error die te vroeg in beeld komt.\u003C/p>",{"headings":73,"localImagePaths":94,"remoteImagePaths":95,"frontmatter":96,"imagePaths":100},[74,77,80,82,85,88,91],{"depth":31,"slug":75,"text":76},"debouncing","Debouncing",{"depth":33,"slug":78,"text":79},"comboboxsvelte","ComboBox.svelte",{"depth":33,"slug":55,"text":81},"Debounce",{"depth":37,"slug":83,"text":84},"wat-is-debouncing","Wat is debouncing?",{"depth":37,"slug":86,"text":87},"hoe-werkt-debouncing","Hoe werkt debouncing?",{"depth":37,"slug":89,"text":90},"waarom-heb-ik-het-gebruikt","Waarom heb ik het gebruikt?",{"depth":33,"slug":92,"text":93},"conclusie","Conclusie",[],[],{"id":31,"title":58,"pubDate":97,"description":60,"image":98,"tags":99,"lang":22},["Date","2025-04-25T00:00:00.000Z"],{"url":62,"alt":63},[65,66,21],[],"natureofcode-ch1",{"id":101,"data":103,"body":116,"filePath":117,"digest":118,"rendered":119},{"id":104,"title":105,"pubDate":106,"description":107,"tags":108,"relatedPosts":112,"lang":115},8,"Nature of Code - intro to creative coding",["Date","2025-05-30T00:00:00.000Z"],"Learning more about P5js from the wonderful Daniel Shiffman",[109,110,111,21],"P5","creative coding","js",[113,114],"learn-react","learn-php","en","# Random Walks\n\n> The generation of random numbers is too important to be left to chance - Robert R. Coveyou\n\n## The Random Walker Class\n\nA random walk is a path defined as a series of random steps. \n\nAn **object** in JavaScript is an entity that has data and functionality. In this case it's a *walker* object with data about its position on the canvas, and the functionality to \"walk\", move around the canvas.\n\nA **class** is used to create the actual instances of these objects. \n\nSo a walker needs a number for its x-position and a number for its y-position. To start at the center of the canvas, we use `this.x = width /2` and `this.y = height / 2` in the class's constructor function. `constructor()` is like the sketch's `setup()` function. It's responsible for defining the initial properties of an object, like `setup()` does for the sketch.\n\n```js\nclass Walker {\n  // Objects have a constructor where they are initialized.\n  constructor() {\n    // Objects have data.\n    this.x = width / 2;\n    this.y = height / 2;\n  }\n```\n\nHere we use the keyword `this` to attach the properties to the newly created object. So now this Walker class has data, let's add functionality. The first method `show()` is used to code the \"path\", the trail the walker leaves behind. A method is basically a function inside a class, so it's associated with an object or class, and not a standalone function.\n\n```js\n  // Objects have methods – show.\n  show() {\n    stroke(0);\n    point(this.x, this.y);\n  }\n```\n\nNext we're adding `step()`, which directs the walker to move, or take a step. We want the path to be random, with no preferred direction. So we're gonna use `floor(random(4))`, so left, right, up and down all have an equal chance.\n\n```js\n  step() {\n    //{!1} 0, 1, 2, or 3. The random choice determines the step.\n    let choice = floor(random(4));\n    if (choice === 0) {\n      this.x++;\n    } else if (choice === 1) {\n      this.x--;\n    } else if (choice === 2) {\n      this.y++;\n    } else {\n      this.y--;\n    }\n  }\n}\n```\n\nNow the class is done. And we can create the actual Walker object.\n\n```js\nlet walker;\n\n// in P5 setup is executed once when the sketch starts\nfunction setup() {\n  createCanvas(640, 240);\n  // Create the walker.\n  walker = new Walker();\n  background(255);\n}\n```\n\n\nThis is my finished product for this introductory chapter. I have used this shorter way to define the step direction, instead of defining each number separately. This way it's also easier to code in a 'bias',  as `let xstep = random(-5, 1)` will make it pretty much *run* to the left side.\n\n```js\n\tlet xstep = random(-1, 1);\n    let ystep = random(-1, 1);\n\n    this.x += xstep;\n    this.y += ystep;\n```\n\n\u003Ciframe src=\"https://editor.p5js.org/lisagjh/full/vtm5zXF2p\">\u003C/iframe>","src/content/blog/natureofcode-ch1.md","5dd2ff9c21f1237e",{"html":120,"metadata":121},"\u003Ch1 id=\"random-walks\">Random Walks\u003C/h1>\n\u003Cblockquote>\n\u003Cp>The generation of random numbers is too important to be left to chance - Robert R. Coveyou\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"the-random-walker-class\">The Random Walker Class\u003C/h2>\n\u003Cp>A random walk is a path defined as a series of random steps.\u003C/p>\n\u003Cp>An \u003Cstrong>object\u003C/strong> in JavaScript is an entity that has data and functionality. In this case it’s a \u003Cem>walker\u003C/em> object with data about its position on the canvas, and the functionality to “walk”, move around the canvas.\u003C/p>\n\u003Cp>A \u003Cstrong>class\u003C/strong> is used to create the actual instances of these objects.\u003C/p>\n\u003Cp>So a walker needs a number for its x-position and a number for its y-position. To start at the center of the canvas, we use \u003Ccode>this.x = width /2\u003C/code> and \u003Ccode>this.y = height / 2\u003C/code> in the class’s constructor function. \u003Ccode>constructor()\u003C/code> is like the sketch’s \u003Ccode>setup()\u003C/code> function. It’s responsible for defining the initial properties of an object, like \u003Ccode>setup()\u003C/code> does for the sketch.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">class\u003C/span>\u003Cspan style=\"color:#B392F0\"> Walker\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Objects have a constructor where they are initialized.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  constructor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    // Objects have data.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.x \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> width \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.y \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> height \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Here we use the keyword \u003Ccode>this\u003C/code> to attach the properties to the newly created object. So now this Walker class has data, let’s add functionality. The first method \u003Ccode>show()\u003C/code> is used to code the “path”, the trail the walker leaves behind. A method is basically a function inside a class, so it’s associated with an object or class, and not a standalone function.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Objects have methods – show.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  show\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    stroke\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">    point\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.x, \u003C/span>\u003Cspan style=\"color:#79B8FF\">this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.y);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Next we’re adding \u003Ccode>step()\u003C/code>, which directs the walker to move, or take a step. We want the path to be random, with no preferred direction. So we’re gonna use \u003Ccode>floor(random(4))\u003C/code>, so left, right, up and down all have an equal chance.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  step\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">    //{!1} 0, 1, 2, or 3. The random choice determines the step.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> choice \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> floor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">random\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (choice \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.x\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (choice \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.x\u003C/span>\u003Cspan style=\"color:#F97583\">--\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (choice \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.y\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    } \u003C/span>\u003Cspan style=\"color:#F97583\">else\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.y\u003C/span>\u003Cspan style=\"color:#F97583\">--\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Now the class is done. And we can create the actual Walker object.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> walker;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// in P5 setup is executed once when the sketch starts\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> setup\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  createCanvas\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">640\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">240\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // Create the walker.\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  walker \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Walker\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  background\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">255\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is my finished product for this introductory chapter. I have used this shorter way to define the step direction, instead of defining each number separately. This way it’s also easier to code in a ‘bias’,  as \u003Ccode>let xstep = random(-5, 1)\u003C/code> will make it pretty much \u003Cem>run\u003C/em> to the left side.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tlet\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> xstep \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> random\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    let\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ystep \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> random\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.x \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> xstep;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    this\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.y \u003C/span>\u003Cspan style=\"color:#F97583\">+=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ystep;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ciframe src=\"https://editor.p5js.org/lisagjh/full/vtm5zXF2p\">\u003C/iframe>",{"headings":122,"localImagePaths":129,"remoteImagePaths":130,"frontmatter":131,"imagePaths":135},[123,126],{"depth":31,"slug":124,"text":125},"random-walks","Random Walks",{"depth":33,"slug":127,"text":128},"the-random-walker-class","The Random Walker Class",[],[],{"id":104,"title":105,"pubDate":132,"description":107,"tags":133,"lang":115,"relatedPosts":134},["Date","2025-05-30T00:00:00.000Z"],[109,110,111,21],[113,114],[],{"id":113,"data":137,"body":146,"filePath":147,"digest":148,"rendered":149},{"id":138,"title":139,"pubDate":140,"description":141,"tags":142,"relatedPosts":144,"lang":22},7,"Introduction to React",["Date","2025-05-09T00:00:00.000Z"],"Mijn aantekeningen bij het leren van React.",[143,65,21],"React",[114,145,101],"debounce-php","## Inhoud\n\n- [[#Componenten]]\n  -  [[#Markup - JSX]]\n  - [[#Classes]]\n  - [[#Voorbeeld - Component]]\n- [[#Routing]]\n  - [[#Layouts]]\n  - [[#Link]]\n- [[#Hooks]]\n  - [[#useState]]\n  - [[#useEffect]]\n  - [[#useContext]]\n  - [[#Other]]\n- [[#Bronnen]]\n\n## Installatie\n\nStart een nieuw React project met Vite. Dit doe je met: \n\n```\nnpm create vite@latest \"name\"\n```\n\n## Componenten\n\nReact componenten zijn JavaScript functies die markup returnen:\n\n```js\nfunction MyButton() {  \n\treturn (  \n\t\t\u003Cbutton>I'm a button\u003C/button>  \n\t);  \n}\n```\n\nJe kan ze nesten in andere componenten:\n\n```js\nexport default function MyApp() {  \n\treturn (  \n\t\t\u003Cdiv>  \n\t\t\t\u003Ch1>Welcome to my app\u003C/h1>  \n\t\t\t\u003CMyButton />  \n\t\t\u003C/div>  \n\t\t);  \n\t}\n```\n\n\n> Componenten beginnen met hoofdletters. Hierdoor zijn ze makkelijk te onderscheiden van reguliere HTML tags.\n\nAlles binnen zo een component moet in een gedeelde parent zitten. Dit kan een `\u003Cdiv>` zijn, maar ook een lege tag `\u003C>`, deze sluit je zo `\u003C/>`. Hiermee maak je niet nog een extra onnodige node of onnodige `\u003Cdiv>`.  Dit is het zelfde als `\u003CReact.Fragment>`.\n\n**Return** verteld het component of de functie wat gerendered moet worden.\n\n\n### Markup - JSX\n\nDe meeste React projecten gebruik JSX markup. Het is stricter dan html. Je moet bepaalde tags, zoals `\u003Cbr>` wel sluiten, wat in html niet hoeft. \n\n### Classes\n\nOm een class toe te voegen aan iets, gebruik je `className` in plaats van class;\n\n`\u003Cimg className=\"avatar\" />`\n\nDe CSS class define je dan in een aparte `.css` file.\n\n#### Voorbeeld - Component\n\n```js\nconst user = {\n  name: 'Hedy Lamarr',\n  imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',\n  imageSize: 90,\n};\n\nexport default function Profile() {\n  return (\n  // gebruik \u003C> om de html te wrappen - kan ook een div zijn of iets. \n    \u003C>\n      \u003Ch1>{user.name}\u003C/h1>\n      \u003Cimg\n        className=\"avatar\"\n        src={user.imageUrl}\n        alt={'Photo of ' + user.name}\n        style={{\n          width: user.imageSize,\n          height: user.imageSize\n        }}\n      />\n      // sluit de html wrapper\n    \u003C/>\n  );\n}\n```\n\n\n## Routing\n\nIn React gebruik je React Router om componenten als pagina's te kunnen gebruiken. React Router is een library, deze moet je dus nog wel apart installeren.\n\n`npm i react-router-dom`\n\nDaarna maak je een folder `/src/pages` , hier zet je de page componenten in. Nu word het leuk. \n\nIn de `App.jsx` file importeer je de `HashRouter`, `Routes`, en `Route` van `react-router-dom`. Daarna schrijf je de functie waarmee de routes gemaakt worden:\n\n```js\nimport { HashRouter as Router, Routes, Route } from 'react-router'\n\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\n\nfunction App() {\n\n  return {\n    \u003CRouter>\n      \u003CRoutes>\n        \u003CRoute path=\"/\" element={\u003CHome />} />\n        \u003CRoute path=\"/about\" element={\u003CAbout />} />\n      \u003C/Routes>\n\u003C/Router>\n```\n\nJe nest de elke route in de routes, in de router. Elke route geef je twee props mee, het path en het element. Elk page element moet apart geïmporteerd worden.\n\n### Layouts\n\nBinnen de router in de `App.jsx` kan je een layout gebruiken.\n\nEerst maak je de file voor de layout, `/src/Layout.jsx`. Hier importeer je het `Outlet` component, waarin de child componenten (de pagina's) gerendered gaan worden. Hier kan je ook componenten die je op elke pagina op dezelfde plek wilt hebben gebruiken, zoals een navigatie.\n\n```js\nimport { Outlet } from \"react-router-dom\";\nimport Nav from \"./components/Nav\";\n\nexport function Layout() {\n  return (\n    \u003C>\n      \u003CNav />\n      \n      \u003Cmain>\n        {/* render the child routes in the \u003COutlet /> */}\n        \u003COutlet />\n      \u003C/main>\n    \u003C/>\n    );\n}\n```\n\nOm de Layout te gebruiken, moet je deze importeren in de `App.jsx` en in de Router gebruiken. Dit doe je door de andere routes in een route zonder path maar met de layout als element te nesten.\n\n```js\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Layout } from \"./Layout\";\n\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\n\nexport default function App() {\n  return (\n    \u003CRouter>\n      \u003CRoutes>\n        \u003CRoute element={\u003CLayout />}>\n          \u003CRoute path=\"/\" element={\u003CHome />} />\n          \u003CRoute path=\"/about\" element={\u003CAbout />} />\n        \u003C/Route>\n    \u003C/Routes>\n\u003C/Router>\n);\n}\n```\n\nNu komt op beide pagina's de navigatie te staan.\n\n### Link\n\nOm naar een andere pagina te linken, gebruik je het `\u003CLink />` component. \n\n```js\nimport { Link } from \"react-router-dom\";\n\nexport default function Nav() {\n  return (\n    \u003Cnav>\n      \u003Cul>\n        \u003Cli>\n          \u003CLink to=\"/\">Home\u003C/Link>\n        \u003C/li>\n        \n        \u003Cli>\n          \u003CLink to=\"/about\">About\u003C/Link>\n        \u003C/li>\n      \u003C/ul>\n    \u003C/nav>\n  );\n}\n```\n\n\n## Hooks\n\nReact heeft speciale Hook functies. Hooks bieden een compacte en efficiënte manier van componenten bouwen, omdat je stateful logica kan gebruiken zonder je component hiërarchie anders te maken. Dit zijn de building blocks van de componenten.\n\nJe kan hooks alleen gebruiken boven aan in een functie van een functioneel component. Ze werken niet in reguliere JS functies, geneste functies, loops. Tenzij het een custom Hook is.\n\nEr zijn drie basis Hooks:\n1. [[#useState]]\n2. [[#useEffect]]\n3. [[#useContext]]\n\nen een aantal complexere hooks:\n- useReducer\n- useCallback\n- useMemo\n- useRef\n- useImperativeHandle\n- useLayoutEffect\n- useDebugValue\n### useState\n\n[docs](https://react.dev/reference/react/useState)\n\nState in React is als een geheugen van een component, dat informatie bij houdt.  Hier gebruik je `useState` voor. \n\n`useState` geeft je twee waardes in een array: de current state, en de update state. Je geeft het ook een argument wat de initiële waarde is, in dit geval is dat 0.\n\n```js\nconst [count, setCount] = useState(0);\n```\n\nDan kan je het makkelijk zo updaten:\n\n```js\nsetCount(count+1)\n```\n\n`useState` kan ook gebruikt worden voor conditional rendering.\n\n```js\nfunction App() {\n\tconst [count, setCount] = useState(0)\n\n\treturn (\n\t\t\u003Cbutton onClick={()=> setCount(count + 1)}> // increment the count by 1\n\t\t  {count}\n\t\t\u003C/button\n\t);\n}\n```\n\n\n### useEffect\n\n[docs](https://react.dev/reference/react/useEffect)\n\nDit is de tweede belangrijkste, maar ook de verwarrendste. Hiervoor moeten we eerst even kijken naar de component lifecycle.\n\n```js\ncomponentDitMount() {\n\t// initialisation\n\t// can only happen once\n}\n\ncomponentDidUpdate() {\n\t// state updated\n\t// can happen multiple times\n}\n\ncomponentWillUnmount() {\n\t// destroyed\n\t// removed from the UI\n}\n```\n\nuseEffect is een functie die jij defined als het eerste argument. React runt jouw functie, of \"side effect\", nadat de DOM is geupdate. Deze Hook is voornamelijk om te synchroniseren met een extern systeem\n\n```js\nuseEffect(()=>? {\n\talert('hello side effect!')\n})\n```\n\nBovenstaande functie word gerund elke keer dat stateful data word geupdate in het component. Dit houd in dat deze word gerund wanneer het component word gemount, en wanneer de state changes.\n\nStel: we moeten data fetchen als het component gemount word. We zetten loaded en setLoaded met `useState` op false. Dan word de state asynchronously geupdate wanneer de data is gefetched. Dit zou een infinite loop worden. Omdat elke keer dat de fetch gedaan word, word de state geupdate, wat de fetch triggered, etc, etc.\n\nDeze loop kan voorkomen worden door een tweede argument aan de useEffect Hook mee te geven, de dependencies. Dit doe je in een array, na het eerste argument. Je kan een lege array mee geven, dus geen dependencies. Dit betekent dat deze hook maar een gerund word, wanner het component eerst initalized word. \nAls er wel dependencies zijn, zet je deze in de array. In dit geval word deze Hook getriggered en gerund wanneer de state van de dependency verandert. In dit geval is dat dus wanneer de state van count verandert.\n\n```js\nfunction Btn() {\n\tconst [count, setCount] = useState(0)\n\tconst [loaded, setLoaded] = useState(false);\n\n\tuseEffect(()=> {\n\t\tfetch('foo').then(()=> setLoaded(true))\n\t},\n\t  // [] - lege dependencies array = geen dependencies\n\t  [count] // is de dependency. runt alleen wanneer de state van count aangepast word\n\t)\n}\n```\n\n### useContext\n\n[docs](https://react.dev/reference/react/useContext)\n\nMet deze Hook kan je met de context API van React werken. Dit is een mechanisme waardoor je data kan delen tussen componenten.\n\nJe gebruikt hier \n\n\n```js\nconst moods = {\n\thappy: ':)',\n\tsad: ':('\n}\nconst MoodContext = createContext(moods)\n\nfunction App(props) {\n\n\treturn (\n\t\t\u003CMoodContext.Provider value={moods.happy}>\n\t\t\n\t\t\t\n\t\t\t\u003CMoodEmoji />\n\t\t\u003C/MoodContext.Provider>\n\t);\n}\n\nfunction MoodEmoji() {\n\tconst mood = useContext(MoodContext)\n\treturn \u003Cp>{ mood }\u003C/p>\n}\n```\n\n---\n\n\n## Bronnen\n\n- [Master React JS the easy way](https://www.youtube.com/watch?v=E8lXC2mR6-k) *video*\n- [useState with conditional rendering in react: showing and hiding components](https://dev.to/adetutu/how-to-use-usestate-hook-with-conditional-rendering-in-react-showing-and-hiding-components-3pj5) *artikel*\n- [Fireship - 10 React Hooks explained + build your own](https://www.youtube.com/watch?v=TNhaISOUy6Q) *video*","src/content/blog/learn-react.md","56423685b71c941c",{"html":150,"metadata":151},"\u003Ch2 id=\"inhoud\">Inhoud\u003C/h2>\n\u003Cul>\n\u003Cli>[[#Componenten]]\n\u003Cul>\n\u003Cli>[[#Markup - JSX]]\u003C/li>\n\u003Cli>[[#Classes]]\u003C/li>\n\u003Cli>[[#Voorbeeld - Component]]\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>[[#Routing]]\n\u003Cul>\n\u003Cli>[[#Layouts]]\u003C/li>\n\u003Cli>[[#Link]]\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>[[#Hooks]]\n\u003Cul>\n\u003Cli>[[#useState]]\u003C/li>\n\u003Cli>[[#useEffect]]\u003C/li>\n\u003Cli>[[#useContext]]\u003C/li>\n\u003Cli>[[#Other]]\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>[[#Bronnen]]\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"installatie\">Installatie\u003C/h2>\n\u003Cp>Start een nieuw React project met Vite. Dit doe je met:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>npm create vite@latest \"name\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"componenten\">Componenten\u003C/h2>\n\u003Cp>React componenten zijn JavaScript functies die markup returnen:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> MyButton\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>I'm a button&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t);  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Je kan ze nesten in andere componenten:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> MyApp\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t\t&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Welcome to my app&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t\t&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">MyButton\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t);  \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cblockquote>\n\u003Cp>Componenten beginnen met hoofdletters. Hierdoor zijn ze makkelijk te onderscheiden van reguliere HTML tags.\u003C/p>\n\u003C/blockquote>\n\u003Cp>Alles binnen zo een component moet in een gedeelde parent zitten. Dit kan een \u003Ccode>&#x3C;div>\u003C/code> zijn, maar ook een lege tag \u003Ccode>&#x3C;>\u003C/code>, deze sluit je zo \u003Ccode>&#x3C;/>\u003C/code>. Hiermee maak je niet nog een extra onnodige node of onnodige \u003Ccode>&#x3C;div>\u003C/code>.  Dit is het zelfde als \u003Ccode>&#x3C;React.Fragment>\u003C/code>.\u003C/p>\n\u003Cp>\u003Cstrong>Return\u003C/strong> verteld het component of de functie wat gerendered moet worden.\u003C/p>\n\u003Ch3 id=\"markup---jsx\">Markup - JSX\u003C/h3>\n\u003Cp>De meeste React projecten gebruik JSX markup. Het is stricter dan html. Je moet bepaalde tags, zoals \u003Ccode>&#x3C;br>\u003C/code> wel sluiten, wat in html niet hoeft.\u003C/p>\n\u003Ch3 id=\"classes\">Classes\u003C/h3>\n\u003Cp>Om een class toe te voegen aan iets, gebruik je \u003Ccode>className\u003C/code> in plaats van class;\u003C/p>\n\u003Cp>\u003Ccode>&#x3C;img className=\"avatar\" />\u003C/code>\u003C/p>\n\u003Cp>De CSS class define je dan in een aparte \u003Ccode>.css\u003C/code> file.\u003C/p>\n\u003Ch4 id=\"voorbeeld---component\">Voorbeeld - Component\u003C/h4>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> user\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Hedy Lamarr'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  imageUrl: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'https://i.imgur.com/yXOvdOSs.jpg'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  imageSize: \u003C/span>\u003Cspan style=\"color:#79B8FF\">90\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Profile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // gebruik &#x3C;> om de html te wrappen - kan ook een div zijn of iets. \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{user.name}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">img\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        className\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"avatar\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        src\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{user.imageUrl}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        alt\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'Photo of '\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> user.name}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">        style\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          width: user.imageSize,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          height: user.imageSize\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        }}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      // sluit de html wrapper\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"routing\">Routing\u003C/h2>\n\u003Cp>In React gebruik je React Router om componenten als pagina’s te kunnen gebruiken. React Router is een library, deze moet je dus nog wel apart installeren.\u003C/p>\n\u003Cp>\u003Ccode>npm i react-router-dom\u003C/code>\u003C/p>\n\u003Cp>Daarna maak je een folder \u003Ccode>/src/pages\u003C/code> , hier zet je de page componenten in. Nu word het leuk.\u003C/p>\n\u003Cp>In de \u003Ccode>App.jsx\u003C/code> file importeer je de \u003Ccode>HashRouter\u003C/code>, \u003Ccode>Routes\u003C/code>, en \u003Ccode>Route\u003C/code> van \u003Ccode>react-router-dom\u003C/code>. Daarna schrijf je de functie waarmee de routes gemaakt worden:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { HashRouter \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Router, Routes, Route } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'react-router'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Home \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"./pages/Home\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> About \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"./pages/About\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;Router>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;Routes>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;Route path\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> element\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{&#x3C;Home />} \u003C/span>\u003Cspan style=\"color:#F97583\">/>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;Route path\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/about\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> element\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{&#x3C;About />} \u003C/span>\u003Cspan style=\"color:#F97583\">/>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/Routes>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/Router>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Je nest de elke route in de routes, in de router. Elke route geef je twee props mee, het path en het element. Elk page element moet apart geïmporteerd worden.\u003C/p>\n\u003Ch3 id=\"layouts\">Layouts\u003C/h3>\n\u003Cp>Binnen de router in de \u003Ccode>App.jsx\u003C/code> kan je een layout gebruiken.\u003C/p>\n\u003Cp>Eerst maak je de file voor de layout, \u003Ccode>/src/Layout.jsx\u003C/code>. Hier importeer je het \u003Ccode>Outlet\u003C/code> component, waarin de child componenten (de pagina’s) gerendered gaan worden. Hier kan je ook componenten die je op elke pagina op dezelfde plek wilt hebben gebruiken, zoals een navigatie.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Outlet } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"react-router-dom\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Nav \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"./components/Nav\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Layout\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Nav\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        {\u003C/span>\u003Cspan style=\"color:#6A737D\">/* render the child routes in the &#x3C;Outlet /> */\u003C/span>\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Outlet\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">main\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Om de Layout te gebruiken, moet je deze importeren in de \u003Ccode>App.jsx\u003C/code> en in de Router gebruiken. Dit doe je door de andere routes in een route zonder path maar met de layout als element te nesten.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { HashRouter \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Router, Routes, Route } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"react-router-dom\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Layout } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"./Layout\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> Home \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"./pages/Home\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> About \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"./pages/About\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Router\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Routes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Route\u003C/span>\u003Cspan style=\"color:#B392F0\"> element\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Layout\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Route\u003C/span>\u003Cspan style=\"color:#B392F0\"> path\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> element\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Home\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Route\u003C/span>\u003Cspan style=\"color:#B392F0\"> path\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/about\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> element\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">About\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />} />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Route\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Routes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Router\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Nu komt op beide pagina’s de navigatie te staan.\u003C/p>\n\u003Ch3 id=\"link\">Link\u003C/h3>\n\u003Cp>Om naar een andere pagina te linken, gebruik je het \u003Ccode>&#x3C;Link />\u003C/code> component.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { Link } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"react-router-dom\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#F97583\"> function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Nav\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">nav\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">ul\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Link\u003C/span>\u003Cspan style=\"color:#B392F0\"> to\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>Home&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Link\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">Link\u003C/span>\u003Cspan style=\"color:#B392F0\"> to\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"/about\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>About&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">Link\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">ul\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">nav\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  );\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"hooks\">Hooks\u003C/h2>\n\u003Cp>React heeft speciale Hook functies. Hooks bieden een compacte en efficiënte manier van componenten bouwen, omdat je stateful logica kan gebruiken zonder je component hiërarchie anders te maken. Dit zijn de building blocks van de componenten.\u003C/p>\n\u003Cp>Je kan hooks alleen gebruiken boven aan in een functie van een functioneel component. Ze werken niet in reguliere JS functies, geneste functies, loops. Tenzij het een custom Hook is.\u003C/p>\n\u003Cp>Er zijn drie basis Hooks:\u003C/p>\n\u003Col>\n\u003Cli>[[#useState]]\u003C/li>\n\u003Cli>[[#useEffect]]\u003C/li>\n\u003Cli>[[#useContext]]\u003C/li>\n\u003C/ol>\n\u003Cp>en een aantal complexere hooks:\u003C/p>\n\u003Cul>\n\u003Cli>useReducer\u003C/li>\n\u003Cli>useCallback\u003C/li>\n\u003Cli>useMemo\u003C/li>\n\u003Cli>useRef\u003C/li>\n\u003Cli>useImperativeHandle\u003C/li>\n\u003Cli>useLayoutEffect\u003C/li>\n\u003Cli>useDebugValue\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"usestate\">useState\u003C/h3>\n\u003Cp>\u003Ca href=\"https://react.dev/reference/react/useState\">docs\u003C/a>\u003C/p>\n\u003Cp>State in React is als een geheugen van een component, dat informatie bij houdt.  Hier gebruik je \u003Ccode>useState\u003C/code> voor.\u003C/p>\n\u003Cp>\u003Ccode>useState\u003C/code> geeft je twee waardes in een array: de current state, en de update state. Je geeft het ook een argument wat de initiële waarde is, in dit geval is dat 0.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Dan kan je het makkelijk zo updaten:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(count\u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>useState\u003C/code> kan ook gebruikt worden voor conditional rendering.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tconst\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">button\u003C/span>\u003Cspan style=\"color:#B392F0\"> onClick\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{()\u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(count \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)}> // increment the count by 1\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t  {count}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t&#x3C;/button\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"useeffect\">useEffect\u003C/h3>\n\u003Cp>\u003Ca href=\"https://react.dev/reference/react/useEffect\">docs\u003C/a>\u003C/p>\n\u003Cp>Dit is de tweede belangrijkste, maar ook de verwarrendste. Hiervoor moeten we eerst even kijken naar de component lifecycle.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">componentDitMount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// initialisation\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// can only happen once\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">componentDidUpdate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// state updated\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// can happen multiple times\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">componentWillUnmount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// destroyed\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t// removed from the UI\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>useEffect is een functie die jij defined als het eerste argument. React runt jouw functie, of “side effect”, nadat de DOM is geupdate. Deze Hook is voornamelijk om te synchroniseren met een extern systeem\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">useEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(()\u003C/span>\u003Cspan style=\"color:#F97583\">=>?\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\talert\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'hello side effect!'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">})\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Bovenstaande functie word gerund elke keer dat stateful data word geupdate in het component. Dit houd in dat deze word gerund wanneer het component word gemount, en wanneer de state changes.\u003C/p>\n\u003Cp>Stel: we moeten data fetchen als het component gemount word. We zetten loaded en setLoaded met \u003Ccode>useState\u003C/code> op false. Dan word de state asynchronously geupdate wanneer de data is gefetched. Dit zou een infinite loop worden. Omdat elke keer dat de fetch gedaan word, word de state geupdate, wat de fetch triggered, etc, etc.\u003C/p>\n\u003Cp>Deze loop kan voorkomen worden door een tweede argument aan de useEffect Hook mee te geven, de dependencies. Dit doe je in een array, na het eerste argument. Je kan een lege array mee geven, dus geen dependencies. Dit betekent dat deze hook maar een gerund word, wanner het component eerst initalized word.\nAls er wel dependencies zijn, zet je deze in de array. In dit geval word deze Hook getriggered en gerund wanneer de state van de dependency verandert. In dit geval is dat dus wanneer de state van count verandert.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> Btn\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tconst\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setCount\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tconst\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> [\u003C/span>\u003Cspan style=\"color:#79B8FF\">loaded\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">setLoaded\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> useState\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\tuseEffect\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(()\u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">\t\tfetch\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'foo'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">).\u003C/span>\u003Cspan style=\"color:#B392F0\">then\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(()\u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#B392F0\"> setLoaded\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">))\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t},\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">\t  // [] - lege dependencies array = geen dependencies\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t  [count] \u003C/span>\u003Cspan style=\"color:#6A737D\">// is de dependency. runt alleen wanneer de state van count aangepast word\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"usecontext\">useContext\u003C/h3>\n\u003Cp>\u003Ca href=\"https://react.dev/reference/react/useContext\">docs\u003C/a>\u003C/p>\n\u003Cp>Met deze Hook kan je met de context API van React werken. Dit is een mechanisme waardoor je data kan delen tussen componenten.\u003C/p>\n\u003Cp>Je gebruikt hier\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"js\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> moods\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\thappy: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">':)'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\tsad: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">':('\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> MoodContext\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> createContext\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(moods)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> App\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">props\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">MoodContext.Provider\u003C/span>\u003Cspan style=\"color:#B392F0\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\">{moods.happy}>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t\t\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t\t&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">MoodEmoji\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t\t&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">MoodContext.Provider\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">\t);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> MoodEmoji\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\tconst\u003C/span>\u003Cspan style=\"color:#79B8FF\"> mood\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> useContext\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(MoodContext)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">\treturn\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{ mood }&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch2 id=\"bronnen\">Bronnen\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.youtube.com/watch?v=E8lXC2mR6-k\">Master React JS the easy way\u003C/a> \u003Cem>video\u003C/em>\u003C/li>\n\u003Cli>\u003Ca href=\"https://dev.to/adetutu/how-to-use-usestate-hook-with-conditional-rendering-in-react-showing-and-hiding-components-3pj5\">useState with conditional rendering in react: showing and hiding components\u003C/a> \u003Cem>artikel\u003C/em>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.youtube.com/watch?v=TNhaISOUy6Q\">Fireship - 10 React Hooks explained + build your own\u003C/a> \u003Cem>video\u003C/em>\u003C/li>\n\u003C/ul>",{"headings":152,"localImagePaths":196,"remoteImagePaths":197,"frontmatter":198,"imagePaths":202},[153,156,159,162,165,168,172,175,178,181,184,187,190,193],{"depth":33,"slug":154,"text":155},"inhoud","Inhoud",{"depth":33,"slug":157,"text":158},"installatie","Installatie",{"depth":33,"slug":160,"text":161},"componenten","Componenten",{"depth":37,"slug":163,"text":164},"markup---jsx","Markup - JSX",{"depth":37,"slug":166,"text":167},"classes","Classes",{"depth":169,"slug":170,"text":171},4,"voorbeeld---component","Voorbeeld - Component",{"depth":33,"slug":173,"text":174},"routing","Routing",{"depth":37,"slug":176,"text":177},"layouts","Layouts",{"depth":37,"slug":179,"text":180},"link","Link",{"depth":33,"slug":182,"text":183},"hooks","Hooks",{"depth":37,"slug":185,"text":186},"usestate","useState",{"depth":37,"slug":188,"text":189},"useeffect","useEffect",{"depth":37,"slug":191,"text":192},"usecontext","useContext",{"depth":33,"slug":194,"text":195},"bronnen","Bronnen",[],[],{"id":138,"title":139,"pubDate":199,"description":141,"tags":200,"lang":22,"relatedPosts":201},["Date","2025-05-09T00:00:00.000Z"],[143,65,21],[114,145,101],[],"css-sibling-count",{"id":203,"data":205,"body":219,"filePath":220,"digest":221,"rendered":222},{"id":169,"title":206,"pubDate":207,"description":208,"image":209,"tags":212,"relatedPosts":215,"lang":115,"note":218},"CSS sibling-count",["Date","2025-05-20T00:00:00.000Z"],"Exploring the new `sibling-count()` in CSS.",{"url":210,"alt":211},"/blog-content/siblingcount-demo.gif","Demo of the sticky header and nav with scroll-state",[213,214,21],"CSS","cssday",[216,217],"scroll-state","css-carousels","This is a new feature and is only available in Chrome Canary 136+ at this time.","CSS just keeps getting better. `sibling-index()` makes staggering css animations easier than ever.\n\nCheck out the demo on the home page, or in the navigation.\n\n## What is `sibling-index()`?\n\n`sibling-index()` is a new CSS function that returns the zero based index of an element, so the position it holds in it's list of siblings. This allows for a dynamic way to target and style elements based on their position, without any JS, hacky CSS `.first` classes or manual `--index` custom properties needed! 🎉 `sibling-index()` does this in a way more elegant way.\n\n## Use Case: Staggered Animations\n\nI have used `sibling-index()` to add a delay on the animations of my work showcase.\n\nOn each list item we calculate a custom delay, based on it's index in the list.\n\n```css\nli {\n  --delay: calc((sibling-index() + 1) * 0.25s);\n  animation: fade-slide-in 0.75s var(--delay) ease-in-out both;\n}\n```\n\n*Note: I'm still trying to figure out a way to delay this completely until it's in the viewport but its a struggle. WIP*\n\n## Use Case: Navigation Staggered Animation\n\nSeeing how easy this was, I figured I'd also implement it in my navigation, make that a little more fun.\n\nThis is all it needs. It's that easy.\n\n```css\nul li {\n  --delay: calc((sibling-index() - 1) * 0.1s);\n  animation: fade-slide-in 0.75s var(--delay) cubic-bezier(\n      0.175,\n      0.885,\n      0.32,\n      1.575\n    )\n    both;\n}\n\n@keyframes fade-slide-in {\n  from {\n    opacity: 0;\n    transform: translateY(-1rem);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n```\n\n## Other Uses\n\nOf course there are plenty other uses for this, other than staggering animations. You can use it to give each item a different color, using it to calculate a custom gradient, or even use it to make a custom cursor. It's a very versatile tool, and I'm sure it will be used in many different ways in the future. Excited to see what you come up with!\n\n## Support\n\nThis is a new feature and is only available in Chrome Canary 136+ at this time — May 2025.","src/content/blog/css-sibling-count.md","a2a297276f946b1e",{"html":223,"metadata":224},"\u003Cp>CSS just keeps getting better. \u003Ccode>sibling-index()\u003C/code> makes staggering css animations easier than ever.\u003C/p>\n\u003Cp>Check out the demo on the home page, or in the navigation.\u003C/p>\n\u003Ch2 id=\"what-is-sibling-index\">What is \u003Ccode>sibling-index()\u003C/code>?\u003C/h2>\n\u003Cp>\u003Ccode>sibling-index()\u003C/code> is a new CSS function that returns the zero based index of an element, so the position it holds in it’s list of siblings. This allows for a dynamic way to target and style elements based on their position, without any JS, hacky CSS \u003Ccode>.first\u003C/code> classes or manual \u003Ccode>--index\u003C/code> custom properties needed! 🎉 \u003Ccode>sibling-index()\u003C/code> does this in a way more elegant way.\u003C/p>\n\u003Ch2 id=\"use-case-staggered-animations\">Use Case: Staggered Animations\u003C/h2>\n\u003Cp>I have used \u003Ccode>sibling-index()\u003C/code> to add a delay on the animations of my work showcase.\u003C/p>\n\u003Cp>On each list item we calculate a custom delay, based on it’s index in the list.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  --delay\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">calc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((sibling-index() + \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) * 0.25\u003C/span>\u003Cspan style=\"color:#79B8FF\">s\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  animation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: fade-slide-in \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.75\u003C/span>\u003Cspan style=\"color:#F97583\">s\u003C/span>\u003Cspan style=\"color:#79B8FF\"> var\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">--delay\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">ease-in-out\u003C/span>\u003Cspan style=\"color:#79B8FF\"> both\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cem>Note: I’m still trying to figure out a way to delay this completely until it’s in the viewport but its a struggle. WIP\u003C/em>\u003C/p>\n\u003Ch2 id=\"use-case-navigation-staggered-animation\">Use Case: Navigation Staggered Animation\u003C/h2>\n\u003Cp>Seeing how easy this was, I figured I’d also implement it in my navigation, make that a little more fun.\u003C/p>\n\u003Cp>This is all it needs. It’s that easy.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">ul\u003C/span>\u003Cspan style=\"color:#85E89D\"> li\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">  --delay\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">calc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">((sibling-index() - \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) * 0.1\u003C/span>\u003Cspan style=\"color:#79B8FF\">s\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  animation\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: fade-slide-in \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.75\u003C/span>\u003Cspan style=\"color:#F97583\">s\u003C/span>\u003Cspan style=\"color:#79B8FF\"> var\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">--delay\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">cubic-bezier\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      0.175\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      0.885\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      0.32\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      1.575\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    )\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    both\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@keyframes\u003C/span>\u003Cspan style=\"color:#FFAB70\"> fade-slide-in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    transform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">translateY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">-1\u003C/span>\u003Cspan style=\"color:#F97583\">rem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  to\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    transform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">translateY\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"other-uses\">Other Uses\u003C/h2>\n\u003Cp>Of course there are plenty other uses for this, other than staggering animations. You can use it to give each item a different color, using it to calculate a custom gradient, or even use it to make a custom cursor. It’s a very versatile tool, and I’m sure it will be used in many different ways in the future. Excited to see what you come up with!\u003C/p>\n\u003Ch2 id=\"support\">Support\u003C/h2>\n\u003Cp>This is a new feature and is only available in Chrome Canary 136+ at this time — May 2025.\u003C/p>",{"headings":225,"localImagePaths":241,"remoteImagePaths":242,"frontmatter":243,"imagePaths":248},[226,229,232,235,238],{"depth":33,"slug":227,"text":228},"what-is-sibling-index","What is sibling-index()?",{"depth":33,"slug":230,"text":231},"use-case-staggered-animations","Use Case: Staggered Animations",{"depth":33,"slug":233,"text":234},"use-case-navigation-staggered-animation","Use Case: Navigation Staggered Animation",{"depth":33,"slug":236,"text":237},"other-uses","Other Uses",{"depth":33,"slug":239,"text":240},"support","Support",[],[],{"id":169,"title":206,"pubDate":244,"description":208,"image":245,"tags":246,"lang":115,"note":218,"relatedPosts":247},["Date","2025-05-20T00:00:00.000Z"],{"url":210,"alt":211},[213,214,21],[216,217],[],{"id":216,"data":250,"body":258,"filePath":259,"digest":260,"rendered":261},{"id":37,"title":251,"pubDate":252,"description":253,"image":254,"tags":256,"relatedPosts":257,"lang":115},"CSS scroll-state()",["Date","2025-05-15T00:00:00.000Z"],"Learning about CSS scroll-state",{"url":255,"alt":211},"/blog-content/demo-scroll-state.gif",[213,214,21],[203,217],"A while ago I read about CSS scroll-state. While building the new version of my website, I got to implement this new feature. This is an extension upon the container queries, to track the state of an element and figure out if it's scrolling or sticky somewhere. This allows us to add an animation or styling when an element is sticky at the top, like this `nav` for example.\n\n## Header and Nav\n\nI started out with a regular sticky header, which contains a nav element.\n\n```css\nheader {\n  position: sticky;\n  top: 0;\n}\n\nnav {\n  width: 100%;\n}\n```\n\nTo prevent issues on browsers that do not support this feature, I've wrapped the CSS for this in an `@supports` query.\n\n```css\n@supports (container-type: scroll-state) {\n  header {\n    container-type: scroll-state;\n    container-name: header;\n  }\n\n  nav {\n    width: 100%;\n    max-width: 65rem;\n    border-radius: 0;\n    box-shadow: 0 0px 2px rgba(0, 0, 0, 0.1);\n  }\n}\n```\n\nAnd then the part that makes the magic work: `@container scroll-state(stuck: top)`. This waits for the header to be stuck at the top of the page. Within this query I have added the different styling for the nav.\n\n```css\n@container scroll-state(stuck: top) {\n  nav {\n    background: linear-gradient(0deg, transparent 0%, var(--white) 90%);\n    border-radius: 0 0 12px 12px;\n    backdrop-filter: blur(1px);\n    -webkit-backdrop-filter: blur(5px);\n    box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\n  }\n}\n```\n\nThis was way easier than I expected it to be. The effect I have created is subtle, but I think it looks way better than before.\n\n### Full Code\n\nthats all.\n\n```css\nheader {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  justify-self: center;\n  position: sticky;\n  top: 0;\n  width: 90vw;\n  max-width: 75rem;\n  z-index: 50;\n}\n\nnav {\n  width: 100%;\n  max-width: 65rem;\n  background: linear-gradient(0deg, transparent 0%, var(--white) 90%);\n  border-radius: 0 0;\n  backdrop-filter: blur(1px);\n  -webkit-backdrop-filter: blur(5px);\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\n}\n\n@supports (container-type: scroll-state) {\n  header {\n    container-type: scroll-state;\n    container-name: header;\n  }\n\n  nav {\n    width: 100%;\n    max-width: 65rem;\n    border-radius: 0;\n    box-shadow: 0 0px 2px rgba(0, 0, 0, 0.1);\n  }\n\n  @container scroll-state(stuck: top) {\n    nav {\n      background: linear-gradient(0deg, transparent 0%, var(--white) 90%);\n      border-radius: 0 0 12px 12px;\n      backdrop-filter: blur(1px);\n      -webkit-backdrop-filter: blur(5px);\n      box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\n    }\n  }\n}\n```\n\n## Support\n\nThis is a new feature and is only available in Chrome and Edge 133+ at this time — May 2025. \n\n### Sources\n\n[CSS scroll-state() - chrome for developers](https://developer.chrome.com/blog/css-scroll-state-queries#progressive_enhancement)","src/content/blog/scroll-state.md","d30627b0b95f9f32",{"html":262,"metadata":263},"\u003Cp>A while ago I read about CSS scroll-state. While building the new version of my website, I got to implement this new feature. This is an extension upon the container queries, to track the state of an element and figure out if it’s scrolling or sticky somewhere. This allows us to add an animation or styling when an element is sticky at the top, like this \u003Ccode>nav\u003C/code> for example.\u003C/p>\n\u003Ch2 id=\"header-and-nav\">Header and Nav\u003C/h2>\n\u003Cp>I started out with a regular sticky header, which contains a nav element.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">header\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  position\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">sticky\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  top\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">nav\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>To prevent issues on browsers that do not support this feature, I’ve wrapped the CSS for this in an \u003Ccode>@supports\u003C/code> query.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@supports\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">container-type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: scroll-state) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  header\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    container-type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: scroll-state;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    container-name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: header;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  nav\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    max-width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">65\u003C/span>\u003Cspan style=\"color:#F97583\">rem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    border-radius\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    box-shadow\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> rgba\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>And then the part that makes the magic work: \u003Ccode>@container scroll-state(stuck: top)\u003C/code>. This waits for the header to be stuck at the top of the page. Within this query I have added the different styling for the nav.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@container\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> scroll-state(stuck: top) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  nav\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    background\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">linear-gradient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#F97583\">deg\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">transparent\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">--white\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">90\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    border-radius\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 12\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 12\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    backdrop-filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">blur\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    -webkit-backdrop-filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">blur\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    box-shadow\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> rgba\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This was way easier than I expected it to be. The effect I have created is subtle, but I think it looks way better than before.\u003C/p>\n\u003Ch3 id=\"full-code\">Full Code\u003C/h3>\n\u003Cp>thats all.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">header\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">flex\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  justify-content\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">space-between\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  align-items\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">center\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  justify-self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">center\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  position\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">sticky\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  top\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">90\u003C/span>\u003Cspan style=\"color:#F97583\">vw\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  max-width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">75\u003C/span>\u003Cspan style=\"color:#F97583\">rem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  z-index\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">50\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">nav\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  max-width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">65\u003C/span>\u003Cspan style=\"color:#F97583\">rem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  background\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">linear-gradient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#F97583\">deg\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">transparent\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">--white\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">90\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  border-radius\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  backdrop-filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">blur\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  -webkit-backdrop-filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">blur\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  box-shadow\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> rgba\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@supports\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">container-type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: scroll-state) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  header\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    container-type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: scroll-state;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    container-name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: header;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">  nav\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">100\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    max-width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">65\u003C/span>\u003Cspan style=\"color:#F97583\">rem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    border-radius\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    box-shadow\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> rgba\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  @container\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> scroll-state(stuck: top) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">    nav\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      background\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">linear-gradient\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#F97583\">deg\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">transparent\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">var\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">--white\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#79B8FF\">90\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      border-radius\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 0\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 12\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 12\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      backdrop-filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">blur\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      -webkit-backdrop-filter\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">blur\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">      box-shadow\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#F97583\">px\u003C/span>\u003Cspan style=\"color:#79B8FF\"> rgba\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"support\">Support\u003C/h2>\n\u003Cp>This is a new feature and is only available in Chrome and Edge 133+ at this time — May 2025.\u003C/p>\n\u003Ch3 id=\"sources\">Sources\u003C/h3>\n\u003Cp>\u003Ca href=\"https://developer.chrome.com/blog/css-scroll-state-queries#progressive_enhancement\">CSS scroll-state() - chrome for developers\u003C/a>\u003C/p>",{"headings":264,"localImagePaths":275,"remoteImagePaths":276,"frontmatter":277,"imagePaths":282},[265,268,271,272],{"depth":33,"slug":266,"text":267},"header-and-nav","Header and Nav",{"depth":37,"slug":269,"text":270},"full-code","Full Code",{"depth":33,"slug":239,"text":240},{"depth":37,"slug":273,"text":274},"sources","Sources",[],[],{"id":37,"title":251,"pubDate":278,"description":253,"image":279,"tags":280,"lang":115,"relatedPosts":281},["Date","2025-05-15T00:00:00.000Z"],{"url":255,"alt":211},[213,214,21],[203,217],[],{"id":217,"data":284,"body":294,"filePath":295,"digest":296,"rendered":297},{"id":285,"title":286,"pubDate":287,"description":288,"image":289,"tags":292,"relatedPosts":293,"lang":115,"note":218},6,"Building a CSS carousel — scroll buttons, markers and anchor positioning",["Date","2025-05-23T00:00:00.000Z"],"CSS Carousels are pretty cool",{"url":290,"alt":291},"/blog-content/css-carousel.png","Screenshot of the carousel on the homepage, in the 'Blog' section.",[213,214,21],[216,203],"CSS Carousels are the new way to create carousels without any JS. In this post I'm exploring how they work, and combining the new scroll markers with anchor positioning and `sibling-index()`.\n\nCheck the demo out on the home page.\n\n## Setup\n\nI started out with a simple `ul`, containing `li` element with the blog post preview content.\n\n```html\n\u003Cul class=\"grid\">\n  {allPosts.map((post) => (\n    \u003Cli>\n      \u003Ca href={`/blog/${post.id}`}>\n        \u003Ch3>{post.data.title}\u003C/h3>\n        \u003Cp>{post.data.description}\u003C/p>\n      \u003C/a>\n    \u003C/li>\n  ))}\n\u003C/ul>\n```\n\nI added some CSS to turn it into a simple carousel, with some scroll snapping.\n\n```css\nul.grid {\n  display: flex;\n  flex-direction: row;\n  overflow-x: auto;\n  scroll-snap-type: x mandatory;\n  scroll-behavior: smooth;\n}\n\nli {\n  scroll-snap-align: center;\n  flex-shrink: 0;\n}\n```\n\n## Scroll Buttons\n\nNow that the basic carousel works, we can add the new fun stuff! I started with the scroll buttons. For this I used `ul::scroll-button(*)`. To target the left or right button, replace the `*` with left or right respectively.\n\n```css\nul::scroll-button(*) {\n  background-color: transparent;\n  width: 3rem;\n  height: 3rem;\n  position: absolute;\n  position-anchor: --grid;\n  border: none;\n  transition: 0.15s ease-in-out;\n}\n```\n\nAs you can see, I have also used anchor positioning, to position the scroll buttons, and scroll markers, relative to the grid. On the left and right buttons I positioned them where I wanted them to be.\n\n## Scroll Markers\n\nNow that we have the scroll buttons, we can add the scroll markers. For this I used `ul::scroll-marker-group`.\n\n```css\n&::scroll-marker-group {\n  position: absolute;\n  position-anchor: --grid;\n  top: anchor(--grid bottom);\n  justify-self: anchor-center;\n}\n```\n\nI didn't even know `justify-self: anchor-center` existed, but it did and was exactly what I needed.\n\nTo target the scroll markers themself, you use `li::scroll-marker`. I've added a background image to each, and gave them a \"random\" rotation, based on it's index in the list. To ensure it's clear where we are in the list, I reduced the opacity of the scroll markers, and made the size a bit smaller.\n\n```css\nli::scroll-marker {\n  content: \"\" / \"Scroll to post\";\n  background: url(/public/assets/svg/dot.svg);\n  height: 2rem;\n  width: 2rem;\n  transform: rotate(calc(sibling-index() * 70deg));\n  opacity: 0.65;\n}\n```\n\nFor the scroll marker of the active element, I increased the opacity, and made it a bit bigger.\n\n```css\nli::scroll-marker:target-current {\n  opacity: 1;\n  scale: 1.1;\n}\n```\n\n### Code\n\nYou can find the full code for the CSS carousel [here](https://github.com/lisagjh/lisavanderhoorn.nl/blob/test/src/components/display/Blog.astro) . Have fun!\n\n### Sources\n\n- [Carousels with CSS](https://developer.chrome.com/blog/carousels-with-css)\n- [CSS Carousel Gallery](https://chrome.dev/carousel/)\n\n## Support\n\nThis is a new feature and is only available in Chrome and Edge 135+ at this time — May 2025.","src/content/blog/css-carousels.md","cdec151fe6995218",{"html":298,"metadata":299},"\u003Cp>CSS Carousels are the new way to create carousels without any JS. In this post I’m exploring how they work, and combining the new scroll markers with anchor positioning and \u003Ccode>sibling-index()\u003C/code>.\u003C/p>\n\u003Cp>Check the demo out on the home page.\u003C/p>\n\u003Ch2 id=\"setup\">Setup\u003C/h2>\n\u003Cp>I started out with a simple \u003Ccode>ul\u003C/code>, containing \u003Ccode>li\u003C/code> element with the blog post preview content.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">ul\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"grid\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  {allPosts.map((post) => (\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">a\u003C/span>\u003Cspan style=\"color:#B392F0\"> href\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">{\u003C/span>\u003Cspan style=\"color:#B392F0\">`\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\">/blog/${post.id}`}\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">h3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{post.data.title}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">h3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>{post.data.description}&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">a\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  ))}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">ul\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I added some CSS to turn it into a simple carousel, with some scroll snapping.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">ul\u003C/span>\u003Cspan style=\"color:#B392F0\">.grid\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  display\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">flex\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  flex-direction\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">row\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  overflow-x\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">auto\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  scroll-snap-type\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">x\u003C/span>\u003Cspan style=\"color:#79B8FF\"> mandatory\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  scroll-behavior\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">smooth\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  scroll-snap-align\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">center\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  flex-shrink\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"scroll-buttons\">Scroll Buttons\u003C/h2>\n\u003Cp>Now that the basic carousel works, we can add the new fun stuff! I started with the scroll buttons. For this I used \u003Ccode>ul::scroll-button(*)\u003C/code>. To target the left or right button, replace the \u003Ccode>*\u003C/code> with left or right respectively.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">ul\u003C/span>\u003Cspan style=\"color:#E1E4E8\">::scroll-button(\u003C/span>\u003Cspan style=\"color:#85E89D\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  background-color\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">transparent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#F97583\">rem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  height\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#F97583\">rem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  position\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">absolute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  position-anchor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: --grid;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  border\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">none\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  transition\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.15\u003C/span>\u003Cspan style=\"color:#F97583\">s\u003C/span>\u003Cspan style=\"color:#79B8FF\"> ease-in-out\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>As you can see, I have also used anchor positioning, to position the scroll buttons, and scroll markers, relative to the grid. On the left and right buttons I positioned them where I wanted them to be.\u003C/p>\n\u003Ch2 id=\"scroll-markers\">Scroll Markers\u003C/h2>\n\u003Cp>Now that we have the scroll buttons, we can add the scroll markers. For this I used \u003Ccode>ul::scroll-marker-group\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x26;::\u003C/span>\u003Cspan style=\"color:#85E89D\">scroll-marker-group\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  position\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">absolute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  position-anchor\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: --grid;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  top\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: anchor(--grid \u003C/span>\u003Cspan style=\"color:#79B8FF\">bottom\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  justify-self\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: anchor-center;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>I didn’t even know \u003Ccode>justify-self: anchor-center\u003C/code> existed, but it did and was exactly what I needed.\u003C/p>\n\u003Cp>To target the scroll markers themself, you use \u003Ccode>li::scroll-marker\u003C/code>. I’ve added a background image to each, and gave them a “random” rotation, based on it’s index in the list. To ensure it’s clear where we are in the list, I reduced the opacity of the scroll markers, and made the size a bit smaller.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\">::\u003C/span>\u003Cspan style=\"color:#85E89D\">scroll-marker\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  content\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> / \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Scroll to post\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  background\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">url\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#FFAB70\">/public/assets/svg/dot.svg\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  height\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\">rem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#F97583\">rem\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  transform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">rotate\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">calc\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(sibling-index() * \u003C/span>\u003Cspan style=\"color:#79B8FF\">70\u003C/span>\u003Cspan style=\"color:#F97583\">deg\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.65\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For the scroll marker of the active element, I increased the opacity, and made it a bit bigger.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">li\u003C/span>\u003Cspan style=\"color:#E1E4E8\">::\u003C/span>\u003Cspan style=\"color:#85E89D\">scroll-marker\u003C/span>\u003Cspan style=\"color:#E1E4E8\">:\u003C/span>\u003Cspan style=\"color:#85E89D\">target-current\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  scale\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1.1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"code\">Code\u003C/h3>\n\u003Cp>You can find the full code for the CSS carousel \u003Ca href=\"https://github.com/lisagjh/lisavanderhoorn.nl/blob/test/src/components/display/Blog.astro\">here\u003C/a> . Have fun!\u003C/p>\n\u003Ch3 id=\"sources\">Sources\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.chrome.com/blog/carousels-with-css\">Carousels with CSS\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://chrome.dev/carousel/\">CSS Carousel Gallery\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"support\">Support\u003C/h2>\n\u003Cp>This is a new feature and is only available in Chrome and Edge 135+ at this time — May 2025.\u003C/p>",{"headings":300,"localImagePaths":315,"remoteImagePaths":316,"frontmatter":317,"imagePaths":322},[301,304,307,310,313,314],{"depth":33,"slug":302,"text":303},"setup","Setup",{"depth":33,"slug":305,"text":306},"scroll-buttons","Scroll Buttons",{"depth":33,"slug":308,"text":309},"scroll-markers","Scroll Markers",{"depth":37,"slug":311,"text":312},"code","Code",{"depth":37,"slug":273,"text":274},{"depth":33,"slug":239,"text":240},[],[],{"id":285,"title":286,"pubDate":318,"description":288,"image":319,"tags":320,"lang":115,"note":218,"relatedPosts":321},["Date","2025-05-23T00:00:00.000Z"],{"url":290,"alt":291},[213,214,21],[216,203],[],{"id":114,"data":324,"body":330,"filePath":331,"digest":332,"rendered":333},{"id":33,"title":325,"pubDate":326,"description":327,"tags":328,"lang":22},"Introduction to PHP",["Date","2025-05-14T00:00:00.000Z"],"Mijn aantekeningen bij het leren van PHP.",[329,21],"PHP","# Table of Contents\n\n- [Introduction to PHP](#introduction-to-php)\n  - [History of PHP](#history-of-php)\n  - [How is PHP used in HTML?](#how-is-php-used-in-html)\n  - [How is PHP executed?](#how-is-php-executed)\n  - [PHP comments](#php-comments)\n    - [Example - Todo list](#voorbeeld---todo-list)\n- [PHP strings & variables](#php-strings--variables)\n  - [Escape Sequences](#escape-sequences)\n  - [String Concatenation](#string-concatenation)\n  - [Variables](#variables)\n    - [Variable parsing](#variable-parsing)\n    - [Curly braces](#curly-braces)\n  - [Concatenating Assignment Operator](#concatenating-assignment-operator)\n  - [Assign by Reference](#assign-by-reference)\n- [Numbers](#numbers)\n  - [Mathematical Assignment Operators](#mathematical-assignment-operators)\n  - [Table Overview Operators](#tabel-overzicht-operators)\n- [PHP Functions](#php-functions)\n  - [Introduction to Functions](#introduction-to-functions)\n    - [Multiple Parameters](#multiple-parameters)\n    - [Default Parameters](#default-parameters)\n    - [Pass by Reference](#pass-by-reference)\n    - [Variable Scope](#variable-scope)\n  - [Introduction to Built-In Functions](#introduction-to-built-in-functions)\n    - [Working with Variables](#werken-met-variables)\n    - [Working with Substrings](#werken-met-substrings)\n- [Bronnen](#bronnen)\n\n# Introduction to PHP\n\n## History of PHP\n\nIn 1994 is PHP gecreeërd.\n\nPHP is een van de fundamentele technologieën van web development, en een van de meest gebruikte server side technologieën. Het word vooral veel gebruikt met populaire CMS'en: WordPress, Drupal, Joomla.\nOok is veel van de underlying code van WooCommerce and Magento gebaseerd op PHP.\n\nPHP heeft veel built-in functionaliteit voor interactie met data. Vanilla PHP alleen kan ook gebruikt worden om web app backends te bouwen. Maar er zijn ook verschillende krachtige frameworks: Laravel, CakePHP, Symfony.\n\n## How is PHP used in HTML?\n\nPHP word gebruikt om dynamische web pages te bouwen.\n\nPHP is ontworpen om goed samen te werken met HTML, waardoor het in-line gebruikt kan worden in een HTML document. Als de website gerendered word, word de PHP uitgevoerd, en als HTML toegevoegd.\n\nHet begin van een PHP line start met: `\u003C?php` en eindigt met `?>`. Bijvoorbeeld:\n\n```html\n\u003Cp>This HTML will get delivered as is\u003C/p>\n\u003C?php echo \"\u003Cp>But this code is interpreted by PHP and turned into HTML\u003C/p>\";?>\n\n```\n\nIn PHP, wordt het `echo` keyword gebruikt voor output text. De tekst in dit geval is alles tussen de `\"aanhalingstekens\"` . Een instructie die in PHP is geschreven heeft een `statement`. Een semicolon `;` is required aan het eind van elk statement.\n\n## How is PHP executed?\n\nPHP kan niet alleen gebruikt worden om dynamische HTML te genereren, maar ook als programmeertaal via de terminal. Wanneer je een PHP-script schrijft, begin je ook altijd met `\u003C?php`, maar de afsluitende tag is meestal niet nodig, en word als conventie vaak weg gelaten.\n\nPHP negeert witruimte, en is deels niet hoofdlettergevoelig – bijvoorbeeld, `echo` en `Echo` werken beide. Toch is het aangeraden om de standaard schrijfwijze (`echo`) te gebruiken.\n\n## PHP comments\n\nEr zijn twee manieren om comments te gebruiken in PHP. De eerste is `single line comments`. Hier word `#` of `//` gebruikt.\n\nDe tweede soort is een `multi line comment`. Hier gebruik je `/* comment */` om meerdere lines of code uit te commenten.\n\n### Voorbeeld - Todo list\n\nDe Todo list is een goed voorbeeld, omdat hier de CRUD behaviors worden gebruikt - create, read, update, delete.\n\n```php\n\u003C?php\n\nrequire 'vendor/autoload.php';\n\n// Verbinding maken met de database\n$pdo = new \\PDO(\"sqlite:\" . \"db/sqlite.db\");\n\n// Nieuwe TODO aanmaken\nif (isset($_POST['submit'])) {\n    $description = $_POST['description'];\n    $sth = $pdo->prepare(\"INSERT INTO todos (description) VALUES (:description)\");\n    $sth->bindValue(':description', $description, PDO::PARAM_STR);\n    $sth->execute();\n}\n\n// TODO verwijderen\nelseif (isset($_POST['delete'])) {\n    $id = $_POST['id'];\n    $sth = $pdo->prepare(\"DELETE FROM todos WHERE id = :id\");\n    $sth->bindValue(':id', $id, PDO::PARAM_INT);\n    $sth->execute();\n}\n\n// TODO markeren als compleet\nelseif (isset($_POST['complete'])) {\n    $id = $_POST['id'];\n    $sth = $pdo->prepare(\"UPDATE todos SET complete = 1 WHERE id = :id\");\n    $sth->bindValue(':id', $id, PDO::PARAM_INT);\n    $sth->execute();\n}\n?>\n\n\u003C!DOCTYPE html>\n\u003Chtml lang=\"en\">\n\u003Chead>\n    \u003Cmeta charset=\"UTF-8\">\n    \u003Ctitle>Todo List\u003C/title>\n\u003C/head>\n\u003Cbody class=\"container\">\n    \u003Ch1>Todo List\u003C/h1>\n\n    \u003Cform method=\"post\" action=\"\">\n        \u003Cinput type=\"text\" name=\"description\" value=\"\">\n        \u003Cinput type=\"submit\" name=\"submit\" value=\"Add\">\n    \u003C/form>\n\n    \u003Ch2>Current Todos\u003C/h2>\n\n    \u003Ctable class=\"table table-striped\">\n        \u003Cthead>\n            \u003Ctr>\n                \u003Cth>Task\u003C/th>\n                \u003Cth>\u003C/th>\n                \u003Cth>\u003C/th>\n            \u003C/tr>\n        \u003C/thead>\n        \u003Ctbody>\n            \u003C?php\n            $sth = $pdo->prepare(\"SELECT * FROM todos ORDER BY id DESC\");\n            $sth->execute();\n\n            foreach ($sth as $row): ?>\n                \u003Ctr>\n                    \u003Ctd>\u003C?= htmlspecialchars($row['description']) ?>\u003C/td>\n                    \u003Ctd>\n                        \u003C?php if (!$row['complete']): ?>\n                            \u003Cform method=\"POST\">\n                                \u003Cbutton type=\"submit\" name=\"complete\">Complete\u003C/button>\n                                \u003Cinput type=\"hidden\" name=\"id\" value=\"\u003C?= $row['id'] ?>\">\n                                \u003Cinput type=\"hidden\" name=\"complete\" value=\"true\">\n                            \u003C/form>\n                        \u003C?php else: ?>\n                            Task Complete!\n                        \u003C?php endif; ?>\n                    \u003C/td>\n                    \u003Ctd>\n                        \u003Cform method=\"POST\">\n                            \u003Cbutton type=\"submit\" name=\"delete\">Delete\u003C/button>\n                            \u003Cinput type=\"hidden\" name=\"id\" value=\"\u003C?= $row['id'] ?>\">\n                            \u003Cinput type=\"hidden\" name=\"delete\" value=\"true\">\n                        \u003C/form>\n                    \u003C/td>\n                \u003C/tr>\n            \u003C?php endforeach; ?>\n        \u003C/tbody>\n    \u003C/table>\n\u003C/body>\n\u003C/html>\n\n```\n\n# PHP strings & variables\n\n- String: woorden of stukken tekst die door de computer worden gezien als een item. Een string is een reeks karakters, tussen `\"quotation marks\"`.\n\n```php\n\u003C?php\necho \"Hello World!\" ;\n```\n\nHet is belangrijk om duidelijk te maken wat een string is en wat niet in een PHP program. Elk deel van de code is tekst, maar de strings zijn data - deze moeten niet uitgevoerd worden door de computer.\n\n## Escape Sequences\n\nAan het begin en eind van een string gebruiken we aanhalingstekens. Deze laten de computer weten dat alles daar tussen een stukje data is.\n\nAls je binnen die string iets tussen aanhalingstekens zet, herkent PHP dit niet en krijg je een syntax error.\n\n```php\necho \"She said \"hi\" to the dog.\"; //syntax error, unexpected 'hi' (T_STRING)\n```\n\nDit kan je oplossen door `\\` backslashes om het deel van de string te zetten met de aanhalingstekens. Dit noem je een _escape sequence_.\n\nBij het printen van meerdere strings heb je ook een escape sequence nodig:\n\n```php\necho \"1. Go to gym\";\necho \"2. Cook dinner\";\n\n/* output:\n1. Go to gym2. Cook dinner\n*/\n```\n\nHier kun je `\\n` er voor zetten, om aan te geven dat het op een nieuwe regel moet staan:\n\n```php\necho \"1. Go to gym\";\necho \"\\n2. Cook dinner\";\n\n1. Go to gym\n2. Cook dinner\n*/\n```\n\n```php\necho \"1. Teach PHP\";\necho \"\\n2. Something else\";\necho \"\\n3. Learn to have \\\"fun\\\"\";\n```\n\n## String Concatenation\n\n```php\necho \"Code\" . \"cademy\";\necho \"\\nMy name is:\" . \" \" . \"Lisa\";\necho \"\\n\" . \"tur\" . \"duck\" . \"en\";\n```\n\n## Variables\n\nIn PHP gebruik je het `$` teken om een variabele te definiëren. Variable names kunnen nummers, letters en underscores (`_`) bevatten, maar moeten altijd beginnen met een letter of underscore. De variable names zijn case sensitive, dus `$my_example` en `$My_example` worden als twee verschillende variables gezien.\n\nEen veel gebruikte conventie bij benaming is het gebruik van een underscore tussen twee woorden, oftewel `snake_case`.\n\n```php\n$name = \"Lisa\";\n$language = \"php\";\n\necho \"I am\" . $name;\necho \"\\n\" . $language\n```\n\n### Variable parsing\n\n```php\n$dog_name = \"Tadpole\";\n$favorite_food = \"salmon\";\n$color = \"brown\";\n\necho \"I have a $color dog named $dog_name and her favorite food is $favorite_food.\";\n// Prints: I have a brown dog named Tadpole and her favorite food is salmon.\n```\n\n#### curly braces\n\nDit voorbeeld geeft een error, omdat `toys` niet bestaat.\n\n```php\n$toy = \"frisbee\";\necho \"Alex likes playing with $toys\";\n```\n\nAls je achter de variable iets wilt zetten, kan je de variabele in curly braces wrappen – `${variable}`. Alles wat er dan direct achter staat word er aan geplakt.\n\n```php\n$dog_name = \"Tadpole\";\n$favorite_food = \"treat\";\n$color = \"brown\";\n\necho \"I have a ${color}ish dog named $dog_name and her favorite food is ${favorite_food}s.\";\n// Prints: I have a brownish dog named Tadpole and her favorite food is treats.\n```\n\n## Concatenating Assignment Operator\n\n```php\n$sentence = \"\\nI'm going on a picnic, and I'm taking apples\";\n$sentence .= \", but also milk\";\n$sentence .= \", cant do nuts though\";\n\necho $sentence;\n// Prints: I'm going on a picnic, and I'm taking apples, but also milk, cant do nuts though\n```\n\n## Assign by Reference\n\nWanneer we een variabele toewijzen aan een andere variabele, reserveert de computer een nieuw stukje geheugen dat wordt gekoppeld aan de linkeroperand, en slaat daar een kopie op van de waarde van de rechteroperand.\n\nDe nieuwe variabele is een kopie van de waarde van de originele variabele, maar het is een onafhankelijke variabele; verandering bij de een heeft geen invloed op de ander.\n\n**Voorbeeld:**\n\n```php\n$first_player_rank = \"Beginner\";\n$second_player_rank = $first_player_rank;\necho $second_player_rank; // Prints: Beginner\n\n$first_player_rank = \"Intermediate\"; // Reassign the value of $first_player_rank\necho $second_player_rank; // Still Prints: Beginner\n```\n\nJe kan ook een alias maken, een bijnaam. In plaats van een kopie van de originele variabele waarde, maken we een nieuwe naam die naar de zelfde plek in het geheugen verwijst. Hier word een andere operator voor gebruikt, de reference assignment oeprator – `=&`.\n\nAls we \"assign by reference\" gebruiken, zeggen we dat de variabele aan de linker kant van de operator verwijzen naar exact dezelfde data als de variabele rechts. Met assignment by reference, veranderingen aan de ene variabele hebben wel invloed op de ander.\n\n**Voorbeeld:**\n\n```php\n$first_player_rank = \"Beginner\";\n$second_player_rank =& $first_player_rank;\necho $second_player_rank; // Prints: Beginner\n\n$first_player_rank = \"Intermediate\"; // Reassign the value of $first_player_rank\necho $second_player_rank; // Prints: Intermediate\n\n```\n\n**Voorbeeld assign by reference:**\n\n```php\n/* Imagine a lot of code here */\n$very_bad_unclear_name = \"15 chicken wings\";\n\n$order =& $very_bad_unclear_name;\n$order .= \", 3 nuggets\";\necho \"\\nYour order is: $very_bad_unclear_name.\";\n\n// Your order is: 15 chicken wings, 3 nuggets.\n```\n\n```php\n$name = \"Tadpole\";\n$title = \", Princess of Dogulon\";\n$name .= $title;\necho $name;\n```\n\n---\n\n# Numbers\n\nPHP heeft twee nummer data types. De `integer` data type is een heel positief of negatief nummers (3, 4500, -98, 0). De `floating point` data type is decimale nummers (4.1, 2.999, -9.2, -1827.98)\n\n```php\n$my_int = 78;\n$my_float = 89.9;\n\necho $my_int; // Prints: 78\necho \"\\n\"; // new line\necho $my_float; // Prints 89.9\n```\n\nEr zijn ook verschillende operators die we kunnen gebruiken.\n\n```php\necho 5 + 1; // Prints: 6\necho 6.6 + 1.2; // Prints: 7.8\necho 198263 - 263;  // Prints: 198000\necho -22.8 - 19.1; // Prints: -41.9\n```\n\nOp deze manier kunnen we ook rekenen met variabelen:\n\n```php\n$tadpole_age = 7;\n$lily_age = 6;\n$age_difference = $tadpole_age - $lily_age;\necho $age_difference; // Prints 1\n```\n\nEn ook delen en keer\n\n```php\n$num_languages = 4;\n$months = 11;\n$days = $months * 16;\n\n$days_per_language = $days / $num_languages;\n\necho $days_per_language;\n```\n\nMaar ook een exponentiation operatotr – `**`.\n\n```php\necho 4 ** 2; // Prints: 16`\n```\n\nDit kan op floats en negatieve nummers ook gebruikt worden\n\n```php\necho 2.89 ** 3.2;  // Prints: 29.845104015297\necho 10 ** -1; // Prints: 0.1\n```\n\nEn de modula operator – `%`. Deze operator returns de remainder, het overblijfsel van de linker operand gedeeld door de rechter operand.\n\n```php\necho 7 % 3; // Prints: 1\n```\n\nJe kan ook bepaalde sommen tussen haakjes zetten.\n\n```php\necho 94 - 4.25 + 7 - (23.50 * 1.2) + (20 / 4);\n```\n\nDe volgorde van de operations word zo bepaald:\n\n1. Any operation wrapped in parentheses (`()`)\n2. Exponents (`**`)\n3. Multiplication (`*`) and division (`/`)\n4. Addition (`+`) and subtraction (`-`).\n\nThe acronym PEMDAS can be helpful for remembering the order of precedence for these arithmetic operations.\n\n### Tabel\n\n| **Operation**  | **Symbol** | **Example**        | **Output** |\n| -------------- | ---------- | ------------------ | ---------- |\n| Addition       | `+`        | `echo 1 + 4.5;`    | 5.5        |\n| Subtraction    | `-`        | `echo 9 - 1;`      | 8          |\n| Multiplication | `*`        | `echo -1.9 * 2.9;` | -5.51      |\n| Division       | `/`        | `echo 9 / 1;`      | 9          |\n| Modulo         | `%`        | `echo 11 % 3;`     | 2          |\n| Exponentiation | `**`       | `echo 8 ** 2;`     | 64         |\n\n## Mathematical Assignment Operators\n\n```php\n$savings = 800;\n$bike_cost = 75;\n$savings = $savings - $bike_cost;\necho $savings; // Prints: 725\n\n// kan korter! MAND --->\n\n$savings = 800;\n$bike_cost = 75;\n$savings -= $bike_cost;\necho $savings; // Prints: 725\n```\n\nPHP heeft ook `increment operators`:\n\n```php\n$age = 89;\n$age++;\necho $age; // Prints: 90\n\n$days_til_vacation = 7;\n$days_til_vacation--;\necho $days_til_vacation; // Prints: 6\n```\n\n### Tabel Overzicht Operators\n\n| **Operation:** | **Long Syntax:** | **Short Syntax:** |\n| -------------- | ---------------- | ----------------- |\n| Add            | $x = $x + $y     | $x += $y          |\n| Subtract       | $x = $x - $y     | $x -= $y          |\n| Multiply       | $x = $x \\* $y    | $x \\*= $y         |\n| Divide         | $x = $x / $y     | $x /= $y          |\n| Modulo         | $x = $x % $y     | $x %= $y          |\n\n---\n\n# PHP Functions\n\nBronnen bij dit deel:\n\n- [PHP functions](https://www.codecademy.com/resources/docs/php/functions)\n- [Introduction to functions - cheatsheet](https://www.codecademy.com/learn/learn-php-functions/modules/introduction-to-functions-in-php/cheatsheet)\n\n## Introduction to Functions\n\n```php\nfunction greetLearner()\n{\n  echo \"Hello, Learner!\\n\";\n  echo \"I hope you're enjoying PHP!\\n\";\n  echo \"Love, Codecademy\";\n}\n\n// invoke function:\ngreetLearner();\n```\n\n```php\nfunction printStringReturnNumber()\n{\n  echo \"ERROR: Page not found!\\n\";\n  return 404;\n}\n\n$my_num = printStringReturnNumber();\necho $my_num;\n\n// prints:\n// ERROR: Page not found!\n// 404\n```\n\n```php\nfunction first()\n{\n  return \"You did it!\\n\";\n}\n\nfunction second()\n{\n  return \"You're amazing!\\n\";\n}\n\nfunction third()\n{\n  return \"You're a coding hero!\\n\";\n}\n\necho first() . \" \" . second() . \" \" . third() ;\n```\n\n```php\nfunction sayCustomHello($name)\n{\necho \"Hello, $name!\";\n};\n\nsayCustomHello(\"Aisle Nevertell\"); // Prints: Hello, Aisle Nevertell!\n\nsayCustomHello(\"Codecademy learner\"); // Prints: Hello, Codecademy Learner!\n\n```\n\n```php\nfunction increaseEnthusiasm($val)\n{\nreturn $val . \"!\";\n}\n\nfunction repeatThreeTimes($string)\n{\nreturn $string . $string . $string;\n}\n\necho increaseEnthusiasm(\"henlo\");\necho repeatThreeTimes(\"hi\");\necho increaseEnthusiasm(repeatThreeTimes(\"HI\"));\n```\n\n### Multiple Parameters\n\nWe kunnen ook functies met meerdere parameters definiëren.\n\n```php\nfunction divide($num_one, $num_two)\n{\n  return $num_one / $num_two;\n};\n\necho divide(12, 3); // Prints: 4\necho divide(3, 12); // Prints: 0.25\n```\n\n❗️ Een functie met minder argumenten aanroepen dan er verwacht worden geven errors, zoals deze:\n\n```php\nfunction expectTwo($first, $second)\n{\n  return \"whatever\";\n}\n\necho expectTwo(\"test\"); // ❌ Will result in an error\n```\n\n**Voorbeeeld:**\n\n```php\nfunction calculateArea($one, $two)\n{\nreturn $one * $two;\n}\n\nfunction calculateVolume($one, $two, $three)\n{\nreturn $one * $two * $three;\n}\n\necho calculateArea(3, 5); // 15\necho calculateVolume(3, 5, 2); // 30\n```\n\n### Default Parameters\n\nJe kan errors voorkomen door een default parameters mee te geven aan de functie. Als er dan geen argument word meegegeven als de functie invoked word, word deze gebruikt. Als er wel een argument word meegegeven, word deze overschreven.\n\n```php\nfunction greetFriend($name = \"old chum\")\n{\n  echo \"Hello, $name!\";\n};\n\ngreetFriend(\"Marvin\"); // Prints: Hello, Marvin!\n\ngreetFriend(); // Prints: Hello, old chum!\n```\n\n### Pass by Reference\n\nWe kunnen functions met variables aanroepen of met directe waardes. Als we een function invoken met een variable als argument, is het alsof we die waarde toewijzen aan de function's parameter. We wijzen een kopie van de waarde van de argument variable toe. Het variable argument en de parameter zijn aparte entities; verandering aan de parameter in de functie heeft geen effect op de waarde die gepassed is.\n\n```php\nfunction addX ($param)\n{\n  $param = $param . \"X\";\n  echo $param;\n};\n$word = \"Hello\";\naddX($word); // Prints: HelloX\necho $word; // Prints: Hello\n```\n\nAls we wel permanent een variabele willen veranderen, daan zetten we een `&` voor de parameter argument van de functie.\n\n```php\nfunction addXPermanently (&$param)\n{\n  $param = $param . \"X\";\n  echo $param;\n};\n$word = \"Hello\";\naddXPermanently($word); // Prints: HelloX\necho $word; // Prints: HelloX\n```\n\n**Voorbeeld**\n\n```php\n$string_one = \"you have teeth\";\n$string_two = \"toads are nice\";\n$string_three = \"brown is my favorite color\";\n\nfunction convertToQuestion(&$str) // gebruik van &\n{\n$str = \"Do you think \" . $str . \"?\\n\";\n// redefinieren van string argument\n}\n\n// in de console de nieuwe string variabele\necho convertToQuestion($string_one);\necho convertToQuestion($string_two);\necho convertToQuestion($string_three)\n```\n\n### Variable Scope\n\n```php\nfunction calculateDaysLeft($feed_quantity, $number, $rate)\n{\n  $result = $feed_quantity / ($number * $rate);\n  return $result;\n}\n\necho calculateDaysLeft(300, 2, 30);\n```\n\n## Introduction to Built-In Functions\n\nPHP heeft een aantal built-in functions. Deze functies – ook bekend als internal functions – kunnen aangeroepen worden zonder dat wij ze zelf te hoeven schrijven.\n\n```php\necho(\"This works!\\n\");\necho \"This also works!\\n\";\necho \"Buuuut!\", \" \", \"This\", \" \", \"does!\", \"\\n\";\n//echo(\"This would NOT work\", \"\\n\");\n```\n\n### Werken met Variables\n\nPHP heeft een handige built-in function voor het verkrijgen van informatie over de variables, zoals `gettype()`. Deze functie neemt een argument en returned een string waarde die aangeeft wat voor data type het argument is.\n\n```php\n$name = \"Aisle Nevertell\";\n$age = 1000000;\n\necho gettype($name); // Prints: string\necho gettype($age); // Prints: integer\n```\n\nEen andere functie die ook een variabele argument gebruikt is de `var_dump()` functie. Het print details over het argument dat het krijgt. Het laat zien wat voor soort data type het is, en welke waarde het heeft. Voor een string laat het de lengte hiervan zien.\n\n```php\nvar_dump($name); // Prints: string(15) \"Aisle Nevertell\"\nvar_dump($age); // Prints: int(1000000)\n```\n\n`strrev()` krijgt een argument, een string, en draait deze om.\n\n```php\necho strrev(\"Hello, World!\"); // Prints: !dlroW ,olleH\n```\n\n`strtolower()` transformeert de argument string naar alleen kleine letters.\n\n```php\necho strtolower(\"HeLLo\"); // Prints: hello\n```\n\n`strrepeat()` neemt een string als eerste argument, en een nummer als het tweede. Het returned een string die de argument string zo vaak herhaald als het argument nummer.\n\n```php\necho str_repeat(\"hi\", 10); // Prints: hihihihihihihihihihi\n```\n\n### Werken met Substrings\n\nEen substring is een deel van een string. `substr_count()` is een functie die de hoeveelheid substrings in een string returned. Het neemt twee argumenten; de string die doorzocht word, en de substring die gezocht word — soms ook de `neelde` genoemd.\n\n```php\n$story = \"I was like, \\\"Dude, like just tell me what you like think because like everyone else is like being totally honest, and like I just want to know what you like think.\\\" So like I don't know...\";\n\necho substr_count($story, \"like\"); // Prints: 8\n```\n\n#### Bronnen\n\n- [Officiële PHP docs](https://www.php.net/manual/en/language.types.string.php)\n- [Variables - codecademy](https://www.codecademy.com/resources/docs/php/variables)\n- [PHP functions](https://www.codecademy.com/resources/docs/php/functions)\n- [Introduction to functions - cheatsheet](https://www.codecademy.com/learn/learn-php-functions/modules/introduction-to-functions-in-php/cheatsheet)","src/content/blog/learn-php.md","82456c5f602dfde0",{"html":334,"metadata":335},"\u003Ch1 id=\"table-of-contents\">Table of Contents\u003C/h1>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#introduction-to-php\">Introduction to PHP\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#history-of-php\">History of PHP\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#how-is-php-used-in-html\">How is PHP used in HTML?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#how-is-php-executed\">How is PHP executed?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#php-comments\">PHP comments\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#voorbeeld---todo-list\">Example - Todo list\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#php-strings--variables\">PHP strings &#x26; variables\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#escape-sequences\">Escape Sequences\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#string-concatenation\">String Concatenation\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#variables\">Variables\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#variable-parsing\">Variable parsing\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#curly-braces\">Curly braces\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#concatenating-assignment-operator\">Concatenating Assignment Operator\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#assign-by-reference\">Assign by Reference\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#numbers\">Numbers\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#mathematical-assignment-operators\">Mathematical Assignment Operators\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#tabel-overzicht-operators\">Table Overview Operators\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#php-functions\">PHP Functions\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#introduction-to-functions\">Introduction to Functions\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#multiple-parameters\">Multiple Parameters\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#default-parameters\">Default Parameters\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#pass-by-reference\">Pass by Reference\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#variable-scope\">Variable Scope\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#introduction-to-built-in-functions\">Introduction to Built-In Functions\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#werken-met-variables\">Working with Variables\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#werken-met-substrings\">Working with Substrings\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#bronnen\">Bronnen\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch1 id=\"introduction-to-php\">Introduction to PHP\u003C/h1>\n\u003Ch2 id=\"history-of-php\">History of PHP\u003C/h2>\n\u003Cp>In 1994 is PHP gecreeërd.\u003C/p>\n\u003Cp>PHP is een van de fundamentele technologieën van web development, en een van de meest gebruikte server side technologieën. Het word vooral veel gebruikt met populaire CMS’en: WordPress, Drupal, Joomla.\nOok is veel van de underlying code van WooCommerce and Magento gebaseerd op PHP.\u003C/p>\n\u003Cp>PHP heeft veel built-in functionaliteit voor interactie met data. Vanilla PHP alleen kan ook gebruikt worden om web app backends te bouwen. Maar er zijn ook verschillende krachtige frameworks: Laravel, CakePHP, Symfony.\u003C/p>\n\u003Ch2 id=\"how-is-php-used-in-html\">How is PHP used in HTML?\u003C/h2>\n\u003Cp>PHP word gebruikt om dynamische web pages te bouwen.\u003C/p>\n\u003Cp>PHP is ontworpen om goed samen te werken met HTML, waardoor het in-line gebruikt kan worden in een HTML document. Als de website gerendered word, word de PHP uitgevoerd, en als HTML toegevoegd.\u003C/p>\n\u003Cp>Het begin van een PHP line start met: \u003Ccode>&#x3C;?php\u003C/code> en eindigt met \u003Ccode>?>\u003C/code>. Bijvoorbeeld:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>This HTML will get delivered as is&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FDAEB7;font-style:italic\">&#x3C;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">?php echo \"&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>But this code is interpreted by PHP and turned into HTML&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">p\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\";?>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>In PHP, wordt het \u003Ccode>echo\u003C/code> keyword gebruikt voor output text. De tekst in dit geval is alles tussen de \u003Ccode>\"aanhalingstekens\"\u003C/code> . Een instructie die in PHP is geschreven heeft een \u003Ccode>statement\u003C/code>. Een semicolon \u003Ccode>;\u003C/code> is required aan het eind van elk statement.\u003C/p>\n\u003Ch2 id=\"how-is-php-executed\">How is PHP executed?\u003C/h2>\n\u003Cp>PHP kan niet alleen gebruikt worden om dynamische HTML te genereren, maar ook als programmeertaal via de terminal. Wanneer je een PHP-script schrijft, begin je ook altijd met \u003Ccode>&#x3C;?php\u003C/code>, maar de afsluitende tag is meestal niet nodig, en word als conventie vaak weg gelaten.\u003C/p>\n\u003Cp>PHP negeert witruimte, en is deels niet hoofdlettergevoelig – bijvoorbeeld, \u003Ccode>echo\u003C/code> en \u003Ccode>Echo\u003C/code> werken beide. Toch is het aangeraden om de standaard schrijfwijze (\u003Ccode>echo\u003C/code>) te gebruiken.\u003C/p>\n\u003Ch2 id=\"php-comments\">PHP comments\u003C/h2>\n\u003Cp>Er zijn twee manieren om comments te gebruiken in PHP. De eerste is \u003Ccode>single line comments\u003C/code>. Hier word \u003Ccode>#\u003C/code> of \u003Ccode>//\u003C/code> gebruikt.\u003C/p>\n\u003Cp>De tweede soort is een \u003Ccode>multi line comment\u003C/code>. Hier gebruik je \u003Ccode>/* comment */\u003C/code> om meerdere lines of code uit te commenten.\u003C/p>\n\u003Ch3 id=\"voorbeeld---todo-list\">Voorbeeld - Todo list\u003C/h3>\n\u003Cp>De Todo list is een goed voorbeeld, omdat hier de CRUD behaviors worden gebruikt - create, read, update, delete.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">&#x3C;?\u003C/span>\u003Cspan style=\"color:#79B8FF\">php\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">require\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'vendor/autoload.php'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Verbinding maken met de database\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$pdo \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#79B8FF\"> \\PDO\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"sqlite:\"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"db/sqlite.db\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Nieuwe TODO aanmaken\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">isset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($_POST[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'submit'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $description \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $_POST[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'description'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $sth \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $pdo\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">prepare\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#F97583\">INSERT INTO\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> todos (\u003C/span>\u003Cspan style=\"color:#F97583\">description\u003C/span>\u003Cspan style=\"color:#9ECBFF\">) \u003C/span>\u003Cspan style=\"color:#F97583\">VALUES\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> (:\u003C/span>\u003Cspan style=\"color:#F97583\">description\u003C/span>\u003Cspan style=\"color:#9ECBFF\">)\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $sth\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">bindValue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">':description'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, $description, \u003C/span>\u003Cspan style=\"color:#79B8FF\">PDO\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#79B8FF\">PARAM_STR\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $sth\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">execute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// TODO verwijderen\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">elseif\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">isset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($_POST[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'delete'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $id \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $_POST[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'id'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $sth \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $pdo\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">prepare\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#F97583\">DELETE\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> todos \u003C/span>\u003Cspan style=\"color:#F97583\">WHERE\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> id \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> :id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $sth\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">bindValue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">':id'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, $id, \u003C/span>\u003Cspan style=\"color:#79B8FF\">PDO\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#79B8FF\">PARAM_INT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $sth\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">execute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// TODO markeren als compleet\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">elseif\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">isset\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($_POST[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'complete'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $id \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $_POST[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'id'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">];\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $sth \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $pdo\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">prepare\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#F97583\">UPDATE\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> todos \u003C/span>\u003Cspan style=\"color:#F97583\">SET\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> complete \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#F97583\"> WHERE\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> id \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> :id\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $sth\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">bindValue\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">':id'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, $id, \u003C/span>\u003Cspan style=\"color:#79B8FF\">PDO\u003C/span>\u003Cspan style=\"color:#F97583\">::\u003C/span>\u003Cspan style=\"color:#79B8FF\">PARAM_INT\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    $sth\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">execute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">?>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">&#x3C;!\u003C/span>\u003Cspan style=\"color:#79B8FF\">DOCTYPE\u003C/span>\u003Cspan style=\"color:#79B8FF\"> html\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">html\u003C/span>\u003Cspan style=\"color:#79B8FF\"> lang\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"en\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">head\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">meta\u003C/span>\u003Cspan style=\"color:#79B8FF\"> charset\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"UTF-8\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">title\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\">Todo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> List\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">title\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">head\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">body\u003C/span>\u003Cspan style=\"color:#F97583\"> class=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"container\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">h1\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\">Todo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> List\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">h1\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">form\u003C/span>\u003Cspan style=\"color:#79B8FF\"> method\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"post\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> action\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">input\u003C/span>\u003Cspan style=\"color:#79B8FF\"> type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"text\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"description\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">input\u003C/span>\u003Cspan style=\"color:#79B8FF\"> type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"submit\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"submit\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Add\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">form\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">h2\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\">Current\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Todos\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">h2\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">table\u003C/span>\u003Cspan style=\"color:#F97583\"> class=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"table table-striped\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">thead\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">tr\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">th\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\">Task\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">th\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">th\u003C/span>\u003Cspan style=\"color:#F97583\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">th\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">th\u003C/span>\u003Cspan style=\"color:#F97583\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">th\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">tr\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">thead\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">tbody\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            &#x3C;?\u003C/span>\u003Cspan style=\"color:#79B8FF\">php\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            $sth \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $pdo\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">prepare\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#F97583\">SELECT\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#F97583\"> FROM\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> todos \u003C/span>\u003Cspan style=\"color:#F97583\">ORDER BY\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> id \u003C/span>\u003Cspan style=\"color:#F97583\">DESC\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            $sth\u003C/span>\u003Cspan style=\"color:#F97583\">->\u003C/span>\u003Cspan style=\"color:#B392F0\">execute\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            foreach\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ($sth \u003C/span>\u003Cspan style=\"color:#F97583\">as\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $row)\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> ?>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">tr\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">td\u003C/span>\u003Cspan style=\"color:#F97583\">>&#x3C;?=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> htmlspecialchars\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($row[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'description'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">]) \u003C/span>\u003Cspan style=\"color:#F97583\">?>&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">td\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">td\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                        &#x3C;?\u003C/span>\u003Cspan style=\"color:#79B8FF\">php\u003C/span>\u003Cspan style=\"color:#F97583\"> if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003Cspan style=\"color:#E1E4E8\">$row[\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'complete'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">])\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#F97583\"> ?>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                            &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">form\u003C/span>\u003Cspan style=\"color:#79B8FF\"> method\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"POST\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                                &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">button\u003C/span>\u003Cspan style=\"color:#79B8FF\"> type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"submit\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"complete\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\">Complete\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">button\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                                &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">input\u003C/span>\u003Cspan style=\"color:#79B8FF\"> type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"hidden\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"id\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"&#x3C;?= \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$row\u003C/span>\u003Cspan style=\"color:#9ECBFF\">['id'] ?>\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                                &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">input\u003C/span>\u003Cspan style=\"color:#79B8FF\"> type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"hidden\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"complete\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"true\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                            &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">form\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                        &#x3C;?\u003C/span>\u003Cspan style=\"color:#79B8FF\">php\u003C/span>\u003Cspan style=\"color:#F97583\"> else:\u003C/span>\u003Cspan style=\"color:#F97583\"> ?>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">                            Task\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Complete\u003C/span>\u003Cspan style=\"color:#F97583\">!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                        &#x3C;?\u003C/span>\u003Cspan style=\"color:#79B8FF\">php\u003C/span>\u003Cspan style=\"color:#F97583\"> endif\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">?>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                    &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">td\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                    &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">td\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                        &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">form\u003C/span>\u003Cspan style=\"color:#79B8FF\"> method\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"POST\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                            &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">button\u003C/span>\u003Cspan style=\"color:#79B8FF\"> type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"submit\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"delete\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003Cspan style=\"color:#79B8FF\">Delete\u003C/span>\u003Cspan style=\"color:#F97583\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">button\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                            &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">input\u003C/span>\u003Cspan style=\"color:#79B8FF\"> type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"hidden\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"id\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"&#x3C;?= \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$row\u003C/span>\u003Cspan style=\"color:#9ECBFF\">['id'] ?>\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                            &#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">input\u003C/span>\u003Cspan style=\"color:#79B8FF\"> type\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"hidden\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> name\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"delete\"\u003C/span>\u003Cspan style=\"color:#79B8FF\"> value\u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"true\"\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                        &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">form\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                    &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">td\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">tr\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            &#x3C;?\u003C/span>\u003Cspan style=\"color:#79B8FF\">php\u003C/span>\u003Cspan style=\"color:#F97583\"> endforeach\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#F97583\">?>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">        &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">tbody\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">table\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">body\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#79B8FF\">html\u003C/span>\u003Cspan style=\"color:#F97583\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch1 id=\"php-strings--variables\">PHP strings &#x26; variables\u003C/h1>\n\u003Cul>\n\u003Cli>String: woorden of stukken tekst die door de computer worden gezien als een item. Een string is een reeks karakters, tussen \u003Ccode>\"quotation marks\"\u003C/code>.\u003C/li>\n\u003C/ul>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">&#x3C;?\u003C/span>\u003Cspan style=\"color:#79B8FF\">php\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Hello World!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Het is belangrijk om duidelijk te maken wat een string is en wat niet in een PHP program. Elk deel van de code is tekst, maar de strings zijn data - deze moeten niet uitgevoerd worden door de computer.\u003C/p>\n\u003Ch2 id=\"escape-sequences\">Escape Sequences\u003C/h2>\n\u003Cp>Aan het begin en eind van een string gebruiken we aanhalingstekens. Deze laten de computer weten dat alles daar tussen een stukje data is.\u003C/p>\n\u003Cp>Als je binnen die string iets tussen aanhalingstekens zet, herkent PHP dit niet en krijg je een syntax error.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"She said \"\u003C/span>\u003Cspan style=\"color:#79B8FF\">hi\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\" to the dog.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">//syntax error, unexpected 'hi' (T_STRING)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Dit kan je oplossen door \u003Ccode>\\\u003C/code> backslashes om het deel van de string te zetten met de aanhalingstekens. Dit noem je een \u003Cem>escape sequence\u003C/em>.\u003C/p>\n\u003Cp>Bij het printen van meerdere strings heb je ook een escape sequence nodig:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"1. Go to gym\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"2. Cook dinner\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/* output:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">1. Go to gym2. Cook dinner\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">*/\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Hier kun je \u003Ccode>\\n\u003C/code> er voor zetten, om aan te geven dat het op een nieuwe regel moet staan:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"1. Go to gym\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">2. Cook dinner\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">1.\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Go\u003C/span>\u003Cspan style=\"color:#79B8FF\"> to\u003C/span>\u003Cspan style=\"color:#79B8FF\"> gym\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">2.\u003C/span>\u003Cspan style=\"color:#79B8FF\"> Cook\u003C/span>\u003Cspan style=\"color:#79B8FF\"> dinner\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">*/\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"1. Teach PHP\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">2. Something else\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">3. Learn to have \u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">fun\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"string-concatenation\">String Concatenation\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Code\"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"cademy\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">My name is:\"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \" \"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Lisa\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"tur\"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"duck\"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"en\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"variables\">Variables\u003C/h2>\n\u003Cp>In PHP gebruik je het \u003Ccode>$\u003C/code> teken om een variabele te definiëren. Variable names kunnen nummers, letters en underscores (\u003Ccode>_\u003C/code>) bevatten, maar moeten altijd beginnen met een letter of underscore. De variable names zijn case sensitive, dus \u003Ccode>$my_example\u003C/code> en \u003Ccode>$My_example\u003C/code> worden als twee verschillende variables gezien.\u003C/p>\n\u003Cp>Een veel gebruikte conventie bij benaming is het gebruik van een underscore tussen twee woorden, oftewel \u003Ccode>snake_case\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Lisa\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$language \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"php\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"I am\"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $name;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $language\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"variable-parsing\">Variable parsing\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$dog_name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Tadpole\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$favorite_food \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"salmon\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$color \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"brown\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"I have a \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$color\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> dog named \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$dog_name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> and her favorite food is \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$favorite_food\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Prints: I have a brown dog named Tadpole and her favorite food is salmon.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"curly-braces\">curly braces\u003C/h4>\n\u003Cp>Dit voorbeeld geeft een error, omdat \u003Ccode>toys\u003C/code> niet bestaat.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$toy \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"frisbee\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Alex likes playing with \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$toys\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Als je achter de variable iets wilt zetten, kan je de variabele in curly braces wrappen – \u003Ccode>${variable}\u003C/code>. Alles wat er dan direct achter staat word er aan geplakt.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$dog_name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Tadpole\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$favorite_food \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"treat\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$color \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"brown\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"I have a \u003C/span>\u003Cspan style=\"color:#E1E4E8\">${color}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">ish dog named \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$dog_name\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> and her favorite food is \u003C/span>\u003Cspan style=\"color:#E1E4E8\">${favorite_food}\u003C/span>\u003Cspan style=\"color:#9ECBFF\">s.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Prints: I have a brownish dog named Tadpole and her favorite food is treats.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"concatenating-assignment-operator\">Concatenating Assignment Operator\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$sentence \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">I'm going on a picnic, and I'm taking apples\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$sentence \u003C/span>\u003Cspan style=\"color:#F97583\">.=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \", but also milk\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$sentence \u003C/span>\u003Cspan style=\"color:#F97583\">.=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \", cant do nuts though\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $sentence;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Prints: I'm going on a picnic, and I'm taking apples, but also milk, cant do nuts though\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"assign-by-reference\">Assign by Reference\u003C/h2>\n\u003Cp>Wanneer we een variabele toewijzen aan een andere variabele, reserveert de computer een nieuw stukje geheugen dat wordt gekoppeld aan de linkeroperand, en slaat daar een kopie op van de waarde van de rechteroperand.\u003C/p>\n\u003Cp>De nieuwe variabele is een kopie van de waarde van de originele variabele, maar het is een onafhankelijke variabele; verandering bij de een heeft geen invloed op de ander.\u003C/p>\n\u003Cp>\u003Cstrong>Voorbeeld:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$first_player_rank \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Beginner\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$second_player_rank \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $first_player_rank;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $second_player_rank; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: Beginner\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$first_player_rank \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Intermediate\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Reassign the value of $first_player_rank\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $second_player_rank; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Still Prints: Beginner\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Je kan ook een alias maken, een bijnaam. In plaats van een kopie van de originele variabele waarde, maken we een nieuwe naam die naar de zelfde plek in het geheugen verwijst. Hier word een andere operator voor gebruikt, de reference assignment oeprator – \u003Ccode>=&#x26;\u003C/code>.\u003C/p>\n\u003Cp>Als we “assign by reference” gebruiken, zeggen we dat de variabele aan de linker kant van de operator verwijzen naar exact dezelfde data als de variabele rechts. Met assignment by reference, veranderingen aan de ene variabele hebben wel invloed op de ander.\u003C/p>\n\u003Cp>\u003Cstrong>Voorbeeld:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$first_player_rank \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Beginner\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$second_player_rank \u003C/span>\u003Cspan style=\"color:#F97583\">=&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $first_player_rank;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $second_player_rank; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: Beginner\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$first_player_rank \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Intermediate\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Reassign the value of $first_player_rank\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $second_player_rank; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: Intermediate\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Voorbeeld assign by reference:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/* Imagine a lot of code here */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$very_bad_unclear_name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"15 chicken wings\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$order \u003C/span>\u003Cspan style=\"color:#F97583\">=&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $very_bad_unclear_name;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$order \u003C/span>\u003Cspan style=\"color:#F97583\">.=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \", 3 nuggets\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Your order is: \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$very_bad_unclear_name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// Your order is: 15 chicken wings, 3 nuggets.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Tadpole\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$title \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \", Princess of Dogulon\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$name \u003C/span>\u003Cspan style=\"color:#F97583\">.=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $title;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $name;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Chr>\n\u003Ch1 id=\"numbers\">Numbers\u003C/h1>\n\u003Cp>PHP heeft twee nummer data types. De \u003Ccode>integer\u003C/code> data type is een heel positief of negatief nummers (3, 4500, -98, 0). De \u003Ccode>floating point\u003C/code> data type is decimale nummers (4.1, 2.999, -9.2, -1827.98)\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$my_int \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 78\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$my_float \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 89.9\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $my_int; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 78\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// new line\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $my_float; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints 89.9\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Er zijn ook verschillende operators die we kunnen gebruiken.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 5\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 6\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 6.6\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1.2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 7.8\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 198263\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 263\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;  \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 198000\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">22.8\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 19.1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: -41.9\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Op deze manier kunnen we ook rekenen met variabelen:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$tadpole_age \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 7\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$lily_age \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 6\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$age_difference \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $tadpole_age \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $lily_age;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $age_difference; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints 1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En ook delen en keer\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$num_languages \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$months \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 11\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$days \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $months \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 16\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$days_per_language \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $days \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $num_languages;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $days_per_language;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Maar ook een exponentiation operatotr – \u003Ccode>**\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#F97583\"> **\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 16`\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Dit kan op floats en negatieve nummers ook gebruikt worden\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 2.89\u003C/span>\u003Cspan style=\"color:#F97583\"> **\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3.2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;  \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 29.845104015297\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 10\u003C/span>\u003Cspan style=\"color:#F97583\"> **\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 0.1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>En de modula operator – \u003Ccode>%\u003C/code>. Deze operator returns de remainder, het overblijfsel van de linker operand gedeeld door de rechter operand.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 7\u003C/span>\u003Cspan style=\"color:#F97583\"> %\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Je kan ook bepaalde sommen tussen haakjes zetten.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 94\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4.25\u003C/span>\u003Cspan style=\"color:#F97583\"> +\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 7\u003C/span>\u003Cspan style=\"color:#F97583\"> -\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">23.50\u003C/span>\u003Cspan style=\"color:#F97583\"> *\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1.2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">+\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#F97583\"> /\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 4\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>De volgorde van de operations word zo bepaald:\u003C/p>\n\u003Col>\n\u003Cli>Any operation wrapped in parentheses (\u003Ccode>()\u003C/code>)\u003C/li>\n\u003Cli>Exponents (\u003Ccode>**\u003C/code>)\u003C/li>\n\u003Cli>Multiplication (\u003Ccode>*\u003C/code>) and division (\u003Ccode>/\u003C/code>)\u003C/li>\n\u003Cli>Addition (\u003Ccode>+\u003C/code>) and subtraction (\u003Ccode>-\u003C/code>).\u003C/li>\n\u003C/ol>\n\u003Cp>The acronym PEMDAS can be helpful for remembering the order of precedence for these arithmetic operations.\u003C/p>\n\u003Ch3 id=\"tabel\">Tabel\u003C/h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>\u003Cstrong>Operation\u003C/strong>\u003C/th>\u003Cth>\u003Cstrong>Symbol\u003C/strong>\u003C/th>\u003Cth>\u003Cstrong>Example\u003C/strong>\u003C/th>\u003Cth>\u003Cstrong>Output\u003C/strong>\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Addition\u003C/td>\u003Ctd>\u003Ccode>+\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>echo 1 + 4.5;\u003C/code>\u003C/td>\u003Ctd>5.5\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Subtraction\u003C/td>\u003Ctd>\u003Ccode>-\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>echo 9 - 1;\u003C/code>\u003C/td>\u003Ctd>8\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Multiplication\u003C/td>\u003Ctd>\u003Ccode>*\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>echo -1.9 * 2.9;\u003C/code>\u003C/td>\u003Ctd>-5.51\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Division\u003C/td>\u003Ctd>\u003Ccode>/\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>echo 9 / 1;\u003C/code>\u003C/td>\u003Ctd>9\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Modulo\u003C/td>\u003Ctd>\u003Ccode>%\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>echo 11 % 3;\u003C/code>\u003C/td>\u003Ctd>2\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Exponentiation\u003C/td>\u003Ctd>\u003Ccode>**\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>echo 8 ** 2;\u003C/code>\u003C/td>\u003Ctd>64\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"mathematical-assignment-operators\">Mathematical Assignment Operators\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$savings \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 800\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$bike_cost \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 75\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$savings \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $savings \u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $bike_cost;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $savings; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 725\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// kan korter! MAND --->\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$savings \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 800\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$bike_cost \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 75\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$savings \u003C/span>\u003Cspan style=\"color:#F97583\">-=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $bike_cost;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $savings; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 725\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>PHP heeft ook \u003Ccode>increment operators\u003C/code>:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$age \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 89\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$age\u003C/span>\u003Cspan style=\"color:#F97583\">++\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $age; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 90\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$days_til_vacation \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 7\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$days_til_vacation\u003C/span>\u003Cspan style=\"color:#F97583\">--\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $days_til_vacation; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 6\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"tabel-overzicht-operators\">Tabel Overzicht Operators\u003C/h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>\u003Cstrong>Operation:\u003C/strong>\u003C/th>\u003Cth>\u003Cstrong>Long Syntax:\u003C/strong>\u003C/th>\u003Cth>\u003Cstrong>Short Syntax:\u003C/strong>\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>Add\u003C/td>\u003Ctd>$x = $x + $y\u003C/td>\u003Ctd>$x += $y\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Subtract\u003C/td>\u003Ctd>$x = $x - $y\u003C/td>\u003Ctd>$x -= $y\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Multiply\u003C/td>\u003Ctd>$x = $x * $y\u003C/td>\u003Ctd>$x *= $y\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Divide\u003C/td>\u003Ctd>$x = $x / $y\u003C/td>\u003Ctd>$x /= $y\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Modulo\u003C/td>\u003Ctd>$x = $x % $y\u003C/td>\u003Ctd>$x %= $y\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Chr>\n\u003Ch1 id=\"php-functions\">PHP Functions\u003C/h1>\n\u003Cp>Bronnen bij dit deel:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.codecademy.com/resources/docs/php/functions\">PHP functions\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.codecademy.com/learn/learn-php-functions/modules/introduction-to-functions-in-php/cheatsheet\">Introduction to functions - cheatsheet\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"introduction-to-functions\">Introduction to Functions\u003C/h2>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> greetLearner\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Hello, Learner!\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"I hope you're enjoying PHP!\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Love, Codecademy\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// invoke function:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">greetLearner\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> printStringReturnNumber\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"ERROR: Page not found!\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 404\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$my_num \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#B392F0\"> printStringReturnNumber\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $my_num;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// prints:\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// ERROR: Page not found!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// 404\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> first\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"You did it!\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> second\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"You're amazing!\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> third\u003C/span>\u003Cspan style=\"color:#E1E4E8\">()\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"You're a coding hero!\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> first\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \" \"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#B392F0\"> second\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() \u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \" \"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#B392F0\"> third\u003C/span>\u003Cspan style=\"color:#E1E4E8\">() ;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> sayCustomHello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($name)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Hello, \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sayCustomHello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Aisle Nevertell\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: Hello, Aisle Nevertell!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">sayCustomHello\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Codecademy learner\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: Hello, Codecademy Learner!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> increaseEnthusiasm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($val)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $val \u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> repeatThreeTimes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($string)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $string \u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $string \u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $string;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> increaseEnthusiasm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"henlo\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> repeatThreeTimes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"hi\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> increaseEnthusiasm\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#B392F0\">repeatThreeTimes\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"HI\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"multiple-parameters\">Multiple Parameters\u003C/h3>\n\u003Cp>We kunnen ook functies met meerdere parameters definiëren.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> divide\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($num_one, $num_two)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $num_one \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $num_two;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> divide\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">12\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 4\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> divide\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">12\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 0.25\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>❗️ Een functie met minder argumenten aanroepen dan er verwacht worden geven errors, zoals deze:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> expectTwo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($first, $second)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"whatever\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> expectTwo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"test\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// ❌ Will result in an error\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Voorbeeeld:\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculateArea\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($one, $two)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $one \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $two;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculateVolume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($one, $two, $three)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $one \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $two \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $three;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculateArea\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// 15\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculateVolume\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">3\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">5\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// 30\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"default-parameters\">Default Parameters\u003C/h3>\n\u003Cp>Je kan errors voorkomen door een default parameters mee te geven aan de functie. Als er dan geen argument word meegegeven als de functie invoked word, word deze gebruikt. Als er wel een argument word meegegeven, word deze overschreven.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> greetFriend\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"old chum\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Hello, \u003C/span>\u003Cspan style=\"color:#E1E4E8\">$name\u003C/span>\u003Cspan style=\"color:#9ECBFF\">!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">greetFriend\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Marvin\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: Hello, Marvin!\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">greetFriend\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: Hello, old chum!\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"pass-by-reference\">Pass by Reference\u003C/h3>\n\u003Cp>We kunnen functions met variables aanroepen of met directe waardes. Als we een function invoken met een variable als argument, is het alsof we die waarde toewijzen aan de function’s parameter. We wijzen een kopie van de waarde van de argument variable toe. Het variable argument en de parameter zijn aparte entities; verandering aan de parameter in de functie heeft geen effect op de waarde die gepassed is.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> addX\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ($param)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  $param \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $param \u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"X\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $param;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$word \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Hello\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">addX\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($word); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: HelloX\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $word; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: Hello\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Als we wel permanent een variabele willen veranderen, daan zetten we een \u003Ccode>&#x26;\u003C/code> voor de parameter argument van de functie.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> addXPermanently\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">$param)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  $param \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $param \u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"X\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $param;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">};\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$word \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Hello\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">addXPermanently\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($word); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: HelloX\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $word; \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: HelloX\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cstrong>Voorbeeld\u003C/strong>\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$string_one \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"you have teeth\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$string_two \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"toads are nice\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$string_three \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"brown is my favorite color\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> convertToQuestion\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">&#x26;\u003C/span>\u003Cspan style=\"color:#E1E4E8\">$str) \u003C/span>\u003Cspan style=\"color:#6A737D\">// gebruik van &#x26;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$str \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Do you think \"\u003C/span>\u003Cspan style=\"color:#F97583\"> .\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $str \u003C/span>\u003Cspan style=\"color:#F97583\">.\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"?\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// redefinieren van string argument\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">// in de console de nieuwe string variabele\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> convertToQuestion\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($string_one);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> convertToQuestion\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($string_two);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> convertToQuestion\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($string_three)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"variable-scope\">Variable Scope\u003C/h3>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">function\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculateDaysLeft\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($feed_quantity, $number, $rate)\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  $result \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $feed_quantity \u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ($number \u003C/span>\u003Cspan style=\"color:#F97583\">*\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $rate);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> $result;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#B392F0\"> calculateDaysLeft\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">300\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">2\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">30\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch2 id=\"introduction-to-built-in-functions\">Introduction to Built-In Functions\u003C/h2>\n\u003Cp>PHP heeft een aantal built-in functions. Deze functies – ook bekend als internal functions – kunnen aangeroepen worden zonder dat wij ze zelf te hoeven schrijven.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"This works!\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"This also works!\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Buuuut!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\" \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"This\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\" \"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"does!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\n\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">//echo(\"This would NOT work\", \"\\n\");\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"werken-met-variables\">Werken met Variables\u003C/h3>\n\u003Cp>PHP heeft een handige built-in function voor het verkrijgen van informatie over de variables, zoals \u003Ccode>gettype()\u003C/code>. Deze functie neemt een argument en returned een string waarde die aangeeft wat voor data type het argument is.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$name \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"Aisle Nevertell\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$age \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#79B8FF\"> 1000000\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> gettype\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($name); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: string\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> gettype\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($age); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: integer\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Een andere functie die ook een variabele argument gebruikt is de \u003Ccode>var_dump()\u003C/code> functie. Het print details over het argument dat het krijgt. Het laat zien wat voor soort data type het is, en welke waarde het heeft. Voor een string laat het de lengte hiervan zien.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">var_dump\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($name); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: string(15) \"Aisle Nevertell\"\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">var_dump\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($age); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: int(1000000)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>strrev()\u003C/code> krijgt een argument, een string, en draait deze om.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> strrev\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Hello, World!\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: !dlroW ,olleH\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>strtolower()\u003C/code> transformeert de argument string naar alleen kleine letters.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> strtolower\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"HeLLo\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: hello\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Ccode>strrepeat()\u003C/code> neemt een string als eerste argument, en een nummer als het tweede. Het returned een string die de argument string zo vaak herhaald als het argument nummer.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> str_repeat\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"hi\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">10\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: hihihihihihihihihihi\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch3 id=\"werken-met-substrings\">Werken met Substrings\u003C/h3>\n\u003Cp>Een substring is een deel van een string. \u003Ccode>substr_count()\u003C/code> is een functie die de hoeveelheid substrings in een string returned. Het neemt twee argumenten; de string die doorzocht word, en de substring die gezocht word — soms ook de \u003Ccode>neelde\u003C/code> genoemd.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"php\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$story \u003C/span>\u003Cspan style=\"color:#F97583\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"I was like, \u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\">Dude, like just tell me what you like think because like everyone else is like being totally honest, and like I just want to know what you like think.\u003C/span>\u003Cspan style=\"color:#79B8FF\">\\\"\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> So like I don't know...\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">echo\u003C/span>\u003Cspan style=\"color:#79B8FF\"> substr_count\u003C/span>\u003Cspan style=\"color:#E1E4E8\">($story, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"like\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">); \u003C/span>\u003Cspan style=\"color:#6A737D\">// Prints: 8\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Ch4 id=\"bronnen\">Bronnen\u003C/h4>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.php.net/manual/en/language.types.string.php\">Officiële PHP docs\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.codecademy.com/resources/docs/php/variables\">Variables - codecademy\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.codecademy.com/resources/docs/php/functions\">PHP functions\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.codecademy.com/learn/learn-php-functions/modules/introduction-to-functions-in-php/cheatsheet\">Introduction to functions - cheatsheet\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":336,"localImagePaths":421,"remoteImagePaths":422,"frontmatter":423,"imagePaths":426},[337,340,342,345,348,351,354,357,360,363,366,369,372,375,378,381,384,387,390,393,396,399,402,405,408,411,414,417,420],{"depth":31,"slug":338,"text":339},"table-of-contents","Table of Contents",{"depth":31,"slug":341,"text":325},"introduction-to-php",{"depth":33,"slug":343,"text":344},"history-of-php","History of PHP",{"depth":33,"slug":346,"text":347},"how-is-php-used-in-html","How is PHP used in HTML?",{"depth":33,"slug":349,"text":350},"how-is-php-executed","How is PHP executed?",{"depth":33,"slug":352,"text":353},"php-comments","PHP comments",{"depth":37,"slug":355,"text":356},"voorbeeld---todo-list","Voorbeeld - Todo list",{"depth":31,"slug":358,"text":359},"php-strings--variables","PHP strings & variables",{"depth":33,"slug":361,"text":362},"escape-sequences","Escape Sequences",{"depth":33,"slug":364,"text":365},"string-concatenation","String Concatenation",{"depth":33,"slug":367,"text":368},"variables","Variables",{"depth":37,"slug":370,"text":371},"variable-parsing","Variable parsing",{"depth":169,"slug":373,"text":374},"curly-braces","curly braces",{"depth":33,"slug":376,"text":377},"concatenating-assignment-operator","Concatenating Assignment Operator",{"depth":33,"slug":379,"text":380},"assign-by-reference","Assign by Reference",{"depth":31,"slug":382,"text":383},"numbers","Numbers",{"depth":37,"slug":385,"text":386},"tabel","Tabel",{"depth":33,"slug":388,"text":389},"mathematical-assignment-operators","Mathematical Assignment Operators",{"depth":37,"slug":391,"text":392},"tabel-overzicht-operators","Tabel Overzicht Operators",{"depth":31,"slug":394,"text":395},"php-functions","PHP Functions",{"depth":33,"slug":397,"text":398},"introduction-to-functions","Introduction to Functions",{"depth":37,"slug":400,"text":401},"multiple-parameters","Multiple Parameters",{"depth":37,"slug":403,"text":404},"default-parameters","Default Parameters",{"depth":37,"slug":406,"text":407},"pass-by-reference","Pass by Reference",{"depth":37,"slug":409,"text":410},"variable-scope","Variable Scope",{"depth":33,"slug":412,"text":413},"introduction-to-built-in-functions","Introduction to Built-In Functions",{"depth":37,"slug":415,"text":416},"werken-met-variables","Werken met Variables",{"depth":37,"slug":418,"text":419},"werken-met-substrings","Werken met Substrings",{"depth":169,"slug":194,"text":195},[],[],{"id":33,"title":325,"pubDate":424,"description":327,"tags":425,"lang":22},["Date","2025-05-14T00:00:00.000Z"],[329,21],[],"projects",["Map",429,430,443,473,502,503,556,557,444,604],"dda-scroll",{"id":429,"data":431,"body":447,"filePath":448,"digest":449,"rendered":450},{"id":33,"title":432,"date":433,"description":434,"image":435,"tags":438,"relatedPosts":442,"livesite":445,"notes":446,"lang":115},"DDA - 3D Scroll Animation","November 2024","Creative Spike focused on using your creativitiy to create a scroll driven animation.",{"url":436,"alt":437},"/work-showcase/dda-scroll.webp","Mockup of my creative spike focused on implementing scroll driven animations in the Dutch Digital Agencies website,",[439,440,441],"Sveltekit","FDND","ThreeJS",[443,444],"dda","dda-viewtransitions","https://spike-one-lisa.vercel.app/","This project uses an API that is still being used and worked on/with by other students. This means that this project may not work anymore.","At FDND, we had a special sprint where we got to let our creativity run free and build fun stuff, letting go of the style of our client. Each week, we received a random prompt focused on a new-ish technology.\n\n## The Challenge\n\nThis week’s focus was on scroll-driven animations. My specific prompt was **_Sad Acid Graphics Scroll Driven Animations_**..\n\nSince I had already done quite a few CSS-based scroll animations before, I challenged myself to take it up a notch and try something new!\n\n## My Solution\n\nI started by researching the meaning of the words in the prompt. I looked up visuals that matched the aesthetic; wireframe shapes, grids, and black-and-white palettes with bold neon accents.\n\nAfter sketching out a rough concept, I jumped into development. I wanted to use Three.js to create a rotating wireframe donut. I had experimented with Three.js earlier in the year, so I could build on that foundation, tweak it and play around with it.\n\nOnce I had the shape working, I focused on the animation. My first version felt clunky, it was too fast and not smooth. It stopped abruptly when you stopped scrolling. So I added easing and tweaked the speed until it felt more fluid and responsive. I also experimented with performance, effects, and of course I spent way too long picking a font.\n\n## The Result\n\nAt the end of the week I had a wireframe grid donut, which smoothly rotates on scroll. Making adjustments to the rest of the page really made it fit the prompt very well.\n\n## Reflection\n\nThis project was very fun! I still think it's pretty cool. It was a fun break from serious client work and a chance to just build something cool and fun. It showed how much fun it is to experiment with unfamiliar technology, and how much impact motion has. \n\nThis project even inspired me to add a similar Three.js shape to my personal website’s homepage (old version), proof that creative spikes can have long-term impact.","src/content/projects/DDA-scroll.md","480d49752832a982",{"html":451,"metadata":452},"\u003Cp>At FDND, we had a special sprint where we got to let our creativity run free and build fun stuff, letting go of the style of our client. Each week, we received a random prompt focused on a new-ish technology.\u003C/p>\n\u003Ch2 id=\"the-challenge\">The Challenge\u003C/h2>\n\u003Cp>This week’s focus was on scroll-driven animations. My specific prompt was \u003Cstrong>\u003Cem>Sad Acid Graphics Scroll Driven Animations\u003C/em>\u003C/strong>..\u003C/p>\n\u003Cp>Since I had already done quite a few CSS-based scroll animations before, I challenged myself to take it up a notch and try something new!\u003C/p>\n\u003Ch2 id=\"my-solution\">My Solution\u003C/h2>\n\u003Cp>I started by researching the meaning of the words in the prompt. I looked up visuals that matched the aesthetic; wireframe shapes, grids, and black-and-white palettes with bold neon accents.\u003C/p>\n\u003Cp>After sketching out a rough concept, I jumped into development. I wanted to use Three.js to create a rotating wireframe donut. I had experimented with Three.js earlier in the year, so I could build on that foundation, tweak it and play around with it.\u003C/p>\n\u003Cp>Once I had the shape working, I focused on the animation. My first version felt clunky, it was too fast and not smooth. It stopped abruptly when you stopped scrolling. So I added easing and tweaked the speed until it felt more fluid and responsive. I also experimented with performance, effects, and of course I spent way too long picking a font.\u003C/p>\n\u003Ch2 id=\"the-result\">The Result\u003C/h2>\n\u003Cp>At the end of the week I had a wireframe grid donut, which smoothly rotates on scroll. Making adjustments to the rest of the page really made it fit the prompt very well.\u003C/p>\n\u003Ch2 id=\"reflection\">Reflection\u003C/h2>\n\u003Cp>This project was very fun! I still think it’s pretty cool. It was a fun break from serious client work and a chance to just build something cool and fun. It showed how much fun it is to experiment with unfamiliar technology, and how much impact motion has.\u003C/p>\n\u003Cp>This project even inspired me to add a similar Three.js shape to my personal website’s homepage (old version), proof that creative spikes can have long-term impact.\u003C/p>",{"headings":453,"localImagePaths":466,"remoteImagePaths":467,"frontmatter":468,"imagePaths":472},[454,457,460,463],{"depth":33,"slug":455,"text":456},"the-challenge","The Challenge",{"depth":33,"slug":458,"text":459},"my-solution","My Solution",{"depth":33,"slug":461,"text":462},"the-result","The Result",{"depth":33,"slug":464,"text":465},"reflection","Reflection",[],[],{"id":33,"title":432,"date":433,"livesite":445,"description":434,"image":469,"notes":446,"tags":470,"relatedPosts":471,"lang":115},{"url":436,"alt":437},[439,440,441],[443,444],[],{"id":443,"data":474,"body":484,"filePath":485,"digest":486,"rendered":487},{"id":31,"title":475,"date":476,"description":477,"image":478,"tags":481,"relatedPosts":482,"livesite":483,"notes":446,"lang":115},"Dutch Digital Agencies","September 2024 - januari 2025","Redesign the DDA website - the dutch bond of digital agencies",{"url":479,"alt":480},"/work-showcase/dda-original.webp","Mockup of my project, the Dutch Digital Agencies website.",[439,440],[429,444],"https://dutchdigitalagencies.vercel.app/","During my final year at FDND, I worked on this project with two classmates. It was a collaboration with [De Voorhoede](https://www.voorhoede.nl/nl/), who developed the actual new website for [Dutch Digital Agencies](https://dutchdigitalagencies.com/). We had the chance to work directly with their team lead, Declan, an expert in his field. Each sprint review, he gave us valuable feedback, which really helped me grow as a developer.\n\n## The Challenge\n\nWe were tasked with building the new design of the DDA website. While we had their design as a base, we also had creative freedom to improve and reimagine parts of it.\n\nThe main challenge for me was working with SvelteKit and Svelte 5 which had just launched. We were still learning about JavaScript frameworks, so jumping into the latest version was challenging, with lots of unknowns and new concepts to master.\n\n## My Solution\n\nDeclan encouraged us to make creative decisions, and I really took that opportunity.\n\nOne of my main focuses was the banner carousel on the homepage. The original design made several logos nearly invisible. I designed our version to ensure better contrast and layout, and honestly, I still prefer ours — it's more consistent and accessible.\n\nFor the menu, I moved it from the header into a sidebar. The original site used a tiny font size (~12px) to fit everything in, which compromised readability. I prioritized accessibility and usability, and restructured the layout to support that, using a sidebar gave me more space and flexibility. I also think that this gives it a more distinct look.\n\n## The Result\n\nWe were able to deliver a new and improved DDA website, and explore different solutions to problems in the original site and design. It was a fun and exciting project, and I learned a lot about working with a new framework, working with other developers, and working with a real client.\n\n## Reflection\n\nI learned a lot about working with frameworks, SvelteKit, and Svelte 5. I also learned about working with new and unfamiliar technology, and reading and using the documentation.\n\nWorking with a real client was also a great learning experience.\n\nI finished this project with stronger skills in development, problem solving, accessibility, and collaboration.\n\nIt’s also fun to compare our version with the official one. I still stand behind a lot of our choices (even though now, just a few months later, I already see some improvements), and I’m proud of what we built.","src/content/projects/DDA.md","e05bb74eea4aefbc",{"html":488,"metadata":489},"\u003Cp>During my final year at FDND, I worked on this project with two classmates. It was a collaboration with \u003Ca href=\"https://www.voorhoede.nl/nl/\">De Voorhoede\u003C/a>, who developed the actual new website for \u003Ca href=\"https://dutchdigitalagencies.com/\">Dutch Digital Agencies\u003C/a>. We had the chance to work directly with their team lead, Declan, an expert in his field. Each sprint review, he gave us valuable feedback, which really helped me grow as a developer.\u003C/p>\n\u003Ch2 id=\"the-challenge\">The Challenge\u003C/h2>\n\u003Cp>We were tasked with building the new design of the DDA website. While we had their design as a base, we also had creative freedom to improve and reimagine parts of it.\u003C/p>\n\u003Cp>The main challenge for me was working with SvelteKit and Svelte 5 which had just launched. We were still learning about JavaScript frameworks, so jumping into the latest version was challenging, with lots of unknowns and new concepts to master.\u003C/p>\n\u003Ch2 id=\"my-solution\">My Solution\u003C/h2>\n\u003Cp>Declan encouraged us to make creative decisions, and I really took that opportunity.\u003C/p>\n\u003Cp>One of my main focuses was the banner carousel on the homepage. The original design made several logos nearly invisible. I designed our version to ensure better contrast and layout, and honestly, I still prefer ours — it’s more consistent and accessible.\u003C/p>\n\u003Cp>For the menu, I moved it from the header into a sidebar. The original site used a tiny font size (~12px) to fit everything in, which compromised readability. I prioritized accessibility and usability, and restructured the layout to support that, using a sidebar gave me more space and flexibility. I also think that this gives it a more distinct look.\u003C/p>\n\u003Ch2 id=\"the-result\">The Result\u003C/h2>\n\u003Cp>We were able to deliver a new and improved DDA website, and explore different solutions to problems in the original site and design. It was a fun and exciting project, and I learned a lot about working with a new framework, working with other developers, and working with a real client.\u003C/p>\n\u003Ch2 id=\"reflection\">Reflection\u003C/h2>\n\u003Cp>I learned a lot about working with frameworks, SvelteKit, and Svelte 5. I also learned about working with new and unfamiliar technology, and reading and using the documentation.\u003C/p>\n\u003Cp>Working with a real client was also a great learning experience.\u003C/p>\n\u003Cp>I finished this project with stronger skills in development, problem solving, accessibility, and collaboration.\u003C/p>\n\u003Cp>It’s also fun to compare our version with the official one. I still stand behind a lot of our choices (even though now, just a few months later, I already see some improvements), and I’m proud of what we built.\u003C/p>",{"headings":490,"localImagePaths":495,"remoteImagePaths":496,"frontmatter":497,"imagePaths":501},[491,492,493,494],{"depth":33,"slug":455,"text":456},{"depth":33,"slug":458,"text":459},{"depth":33,"slug":461,"text":462},{"depth":33,"slug":464,"text":465},[],[],{"id":31,"title":475,"livesite":483,"date":476,"description":477,"image":498,"notes":446,"tags":499,"relatedPosts":500,"lang":115},{"url":479,"alt":480},[439,440],[429,444],[],"sih-data",{"id":502,"data":504,"body":516,"filePath":517,"digest":518,"rendered":519},{"id":14,"title":505,"date":506,"description":507,"image":508,"tags":511,"relatedPosts":513,"livesite":515,"lang":115},"Enriching the Sportkaart Data with New Events","2025-06-17","A case study on extending the Sportkaart platform with data from a new API.",{"url":509,"alt":510},"/work-showcase/sih-data.png","Mockup of the Sport in Haarlem Sportkaart page, on a laptop and ipad.",[329,65,512,21],"Data enrichment",[514,429,444],"SIH","","# Enriching the Sportkaart Data with New Events\n\nDuring my internship at Atlantis Digital in Haarlem, I worked on the [Sportkaart](https://sportinhaarlem.nl/sportkaart/) for Sport in Haarlem, an interactive map that shows all sports activities and locations in the city. One of my main tasks was to enrich the platform by adding event data from an external API.\n\n## The Challenge\n\nThe Sportkaart already worked with a dataset of sport locations. Now we wanted to integrate a second data source, events, without breaking or overcomplicating the UI.\n\nThis required changes to both the backend (PHP) and frontend (JavaScript), and a way to merge two differently structured APIs into one seamless interface.\n\n## My Approach\n\n### Reading and Mapping the Codebase\n\nI started by reading through the existing codebase to understand how data was fetched and passed to the frontend. Then I compared the structure of the current data with the new event API.\n\n![Notes I made while working on the data enrichment task](/blog-content/notes-sih-data.jpg)\n\nAt this point, I had only learned PHP through Codecademy. So I researched how to fetch data in PHP and experimented using `file_get_contents()` combined with `json_decode()` inside a try block to safely parse and inspect the data.\n\n### Cleaning Up the Incoming Data\n\nThe data worked. But the content was messy: inline styles, WordPress block artifacts, random characters, broken formatting.\n\nAt first I tried to clean this manually with `str_replace`, regexes, and string functions… but that quickly became chaotic and unreadable. Eventually I found `do_blocks()`, a native WordPress function that parses block content and returns clean HTML. That solved 90% of my problems instantly.\n\n[More about that in this issue →](https://github.com/users/lisagjh/projects/13/views/14?pane=issue&itemId=110839355&issue=lisagjh%7Ci-love-web%7C260)\n\n### Combining the Datasets\n\nOnce cleaned, I passed both datasets to the frontend. Since they were both arrays of objects, merging them in JavaScript was straightforward. I did have to standardize some fields (like `name` vs `title`, and how descriptions were structured) so the filters and UI still worked correctly.\n\n## Improving the Interface\n\nThe original UI had a lot of filter buttons, twelve categories at the top and checkboxes in the sidebar.\n\n### From 12 Buttons to 2 Tabs\n\nWe decided to introduce a tab-based toggle instead of multiple filter buttons. I updated the component, implemented the logic, and made some accessibility improvements along the way, like increasing the contrast.\n\n![Before and after of the buttons](/blog-content/sih-data-buttons.png)\n\n### Rethinking the Layout\n\nAfter implementing the tabs, the rest of the layout felt inconsistent. The search bar, filters, and toggle were all different sizes and misaligned. I made a quick sketch to explore a cleaner layout where tabs feel like tabs, and controls are grouped more logically.\n\n![Digital sketch of a new layout](/blog-content/sih-data-sketch.png)\n\n## The Result\n\nBy combining datasets, cleaning up messy content, and reworking the UI, I was able to make the Sportkaart smarter and more usable. This gave users access to both locations and events in one unified interface, without a long list of buttons. The events now also have more fitting filters, like age target, type of activity, and district.\n\nThe new layout hasn’t been implemented yet, but I’m excited about the direction it’s going in and hope to finish it soon.\n\n## Reflection\n\nThis was my first real project involving PHP, external APIs, and data transformation. I learned a lot about problem solving, backend logic, and keeping frontend performance in mind while working with live data.\n\nI also really enjoyed the mix of backend and frontend tasks, and seeing how even small layout changes can have a big effect on usability.\n\nEven though this was a smaller project, it sharpened my skills in code reading, debugging, and designing for real-world data.","src/content/projects/SIH-data.md","fcbb9cd320fdaeea",{"html":520,"metadata":521},"\u003Ch1 id=\"enriching-the-sportkaart-data-with-new-events\">Enriching the Sportkaart Data with New Events\u003C/h1>\n\u003Cp>During my internship at Atlantis Digital in Haarlem, I worked on the \u003Ca href=\"https://sportinhaarlem.nl/sportkaart/\">Sportkaart\u003C/a> for Sport in Haarlem, an interactive map that shows all sports activities and locations in the city. One of my main tasks was to enrich the platform by adding event data from an external API.\u003C/p>\n\u003Ch2 id=\"the-challenge\">The Challenge\u003C/h2>\n\u003Cp>The Sportkaart already worked with a dataset of sport locations. Now we wanted to integrate a second data source, events, without breaking or overcomplicating the UI.\u003C/p>\n\u003Cp>This required changes to both the backend (PHP) and frontend (JavaScript), and a way to merge two differently structured APIs into one seamless interface.\u003C/p>\n\u003Ch2 id=\"my-approach\">My Approach\u003C/h2>\n\u003Ch3 id=\"reading-and-mapping-the-codebase\">Reading and Mapping the Codebase\u003C/h3>\n\u003Cp>I started by reading through the existing codebase to understand how data was fetched and passed to the frontend. Then I compared the structure of the current data with the new event API.\u003C/p>\n\u003Cp>\u003Cimg src=\"/blog-content/notes-sih-data.jpg\" alt=\"Notes I made while working on the data enrichment task\">\u003C/p>\n\u003Cp>At this point, I had only learned PHP through Codecademy. So I researched how to fetch data in PHP and experimented using \u003Ccode>file_get_contents()\u003C/code> combined with \u003Ccode>json_decode()\u003C/code> inside a try block to safely parse and inspect the data.\u003C/p>\n\u003Ch3 id=\"cleaning-up-the-incoming-data\">Cleaning Up the Incoming Data\u003C/h3>\n\u003Cp>The data worked. But the content was messy: inline styles, WordPress block artifacts, random characters, broken formatting.\u003C/p>\n\u003Cp>At first I tried to clean this manually with \u003Ccode>str_replace\u003C/code>, regexes, and string functions… but that quickly became chaotic and unreadable. Eventually I found \u003Ccode>do_blocks()\u003C/code>, a native WordPress function that parses block content and returns clean HTML. That solved 90% of my problems instantly.\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/users/lisagjh/projects/13/views/14?pane=issue&#x26;itemId=110839355&#x26;issue=lisagjh%7Ci-love-web%7C260\">More about that in this issue →\u003C/a>\u003C/p>\n\u003Ch3 id=\"combining-the-datasets\">Combining the Datasets\u003C/h3>\n\u003Cp>Once cleaned, I passed both datasets to the frontend. Since they were both arrays of objects, merging them in JavaScript was straightforward. I did have to standardize some fields (like \u003Ccode>name\u003C/code> vs \u003Ccode>title\u003C/code>, and how descriptions were structured) so the filters and UI still worked correctly.\u003C/p>\n\u003Ch2 id=\"improving-the-interface\">Improving the Interface\u003C/h2>\n\u003Cp>The original UI had a lot of filter buttons, twelve categories at the top and checkboxes in the sidebar.\u003C/p>\n\u003Ch3 id=\"from-12-buttons-to-2-tabs\">From 12 Buttons to 2 Tabs\u003C/h3>\n\u003Cp>We decided to introduce a tab-based toggle instead of multiple filter buttons. I updated the component, implemented the logic, and made some accessibility improvements along the way, like increasing the contrast.\u003C/p>\n\u003Cp>\u003Cimg src=\"/blog-content/sih-data-buttons.png\" alt=\"Before and after of the buttons\">\u003C/p>\n\u003Ch3 id=\"rethinking-the-layout\">Rethinking the Layout\u003C/h3>\n\u003Cp>After implementing the tabs, the rest of the layout felt inconsistent. The search bar, filters, and toggle were all different sizes and misaligned. I made a quick sketch to explore a cleaner layout where tabs feel like tabs, and controls are grouped more logically.\u003C/p>\n\u003Cp>\u003Cimg src=\"/blog-content/sih-data-sketch.png\" alt=\"Digital sketch of a new layout\">\u003C/p>\n\u003Ch2 id=\"the-result\">The Result\u003C/h2>\n\u003Cp>By combining datasets, cleaning up messy content, and reworking the UI, I was able to make the Sportkaart smarter and more usable. This gave users access to both locations and events in one unified interface, without a long list of buttons. The events now also have more fitting filters, like age target, type of activity, and district.\u003C/p>\n\u003Cp>The new layout hasn’t been implemented yet, but I’m excited about the direction it’s going in and hope to finish it soon.\u003C/p>\n\u003Ch2 id=\"reflection\">Reflection\u003C/h2>\n\u003Cp>This was my first real project involving PHP, external APIs, and data transformation. I learned a lot about problem solving, backend logic, and keeping frontend performance in mind while working with live data.\u003C/p>\n\u003Cp>I also really enjoyed the mix of backend and frontend tasks, and seeing how even small layout changes can have a big effect on usability.\u003C/p>\n\u003Cp>Even though this was a smaller project, it sharpened my skills in code reading, debugging, and designing for real-world data.\u003C/p>",{"headings":522,"localImagePaths":549,"remoteImagePaths":550,"frontmatter":551,"imagePaths":555},[523,525,526,529,532,535,538,541,544,547,548],{"depth":31,"slug":524,"text":505},"enriching-the-sportkaart-data-with-new-events",{"depth":33,"slug":455,"text":456},{"depth":33,"slug":527,"text":528},"my-approach","My Approach",{"depth":37,"slug":530,"text":531},"reading-and-mapping-the-codebase","Reading and Mapping the Codebase",{"depth":37,"slug":533,"text":534},"cleaning-up-the-incoming-data","Cleaning Up the Incoming Data",{"depth":37,"slug":536,"text":537},"combining-the-datasets","Combining the Datasets",{"depth":33,"slug":539,"text":540},"improving-the-interface","Improving the Interface",{"depth":37,"slug":542,"text":543},"from-12-buttons-to-2-tabs","From 12 Buttons to 2 Tabs",{"depth":37,"slug":545,"text":546},"rethinking-the-layout","Rethinking the Layout",{"depth":33,"slug":461,"text":462},{"depth":33,"slug":464,"text":465},[],[],{"id":14,"title":505,"date":506,"livesite":515,"description":507,"image":552,"tags":553,"relatedPosts":554,"lang":115},{"url":509,"alt":510},[329,65,512,21],[514,429,444],[],"sih",{"id":556,"data":558,"body":567,"filePath":568,"digest":569,"rendered":570},{"id":169,"title":559,"date":560,"description":561,"image":562,"tags":564,"relatedPosts":565,"livesite":515,"lang":115},"Sport in Haarlem: Accessibility Improvements","2025-06-16","Improve the accessibility of the Sportkaart.",{"url":563,"alt":510},"/work-showcase/sih.png",[329,65,512,21],[566,429,444],"SIH-data","# Accessibility on the Sportkaart\n\nDuring my internship at Atlantis Digital in Haarlem, I got to work on the [Sportkaart](https://sportinhaarlem.nl/sportkaart/) for Sport in Haarlem. One of my assignments was to improve the accessibility of this page.\n\nThe page had a number of issues, some were solvable with semantic HTML, others needed more work. I ended up learning a lot about ARIA and WAI-ARIA in the process.\n\n## The Challenge\n\nAccessibility wasn’t considered in the original version of the Sportkaart. That meant the page wasn’t usable with screen readers, wasn’t keyboard-friendly, and didn’t follow semantic HTML best practices.\n\nMy task was to analyze and improve this, while working in a large PHP/JS. I had never worked in a big codebase built by others before, so this was definitely a learning experience.\n\n### Testing & Research\n\nI started by running automatic tests like Lighthouse and WCAG analyzers. Then I continued testing manually with just a keyboard and screen readers.\n\nI documented all issues and potential solutions in this [GitHub comment](https://github.com/lisagjh/i-love-web/issues/120#issuecomment-2720645357).\n\nSince I hadn’t worked in PHP before, I asked colleagues for help understanding the structure. The main file had over 2000 lines of code, which was overwhelming at first, but a great lesson in reading and understanding unfamiliar codebases.\n\n## Fixing the Issues\n\nOnce I understood the flow, I started applying improvements:\n\n### Semantic HTML\n\nMany interactive elements were just `div`s or `span`s with event listeners. I replaced these with proper `\u003Cbutton>` elements. This alone made a huge impact: buttons now had focus states, were reachable by keyboard, and announced by screen readers.\n\n### ARIA Attributes\n\nFor modals and popups, I added roles like `role=\"dialog\"` and `aria-modal=\"true\"`. One specific issue was that focus didn’t stay inside the modal. I fixed this by creating a `trapFocus` function.\n\n### Small but Important UX Fixes\n\nI also added small accessibility features that improve usability for everyone:\n\n- Pressing Escape closes the popup\n- Clicking outside the popup closes it\n- Labels were added to all icon-only buttons\n\nThese are minor features that have a big impact on usability.\n\n## Client Presentation\n\nA few weeks later I presented these improvements to the client. They had never heard of web accessibility before, so I gave a short introduction and demo-ed the issues:\n\n- Keyboard-only navigation (before vs after)\n- Screen reader behavior (before vs after)\n\nThey were surprised and very interested. We talked about how accessibility doesn’t only help people with permanent disabilities, but also temporary or situational impairments, like a broken arm or shaky hands.\n\nIt was great to see how engaged they became once they understood the impact.\n\n## Reflection\n\nMy favorite part of this project was seeing how small changes could make such a big difference. Semantic HTML, proper ARIA roles, and basic interaction patterns go a long way.\n\nIt also boosted my confidence in working with unfamiliar code, asking for help, and making a meaningful impact on real-world projects.","src/content/projects/SIH.md","c5a92b01c1b6e1fe",{"html":571,"metadata":572},"\u003Ch1 id=\"accessibility-on-the-sportkaart\">Accessibility on the Sportkaart\u003C/h1>\n\u003Cp>During my internship at Atlantis Digital in Haarlem, I got to work on the \u003Ca href=\"https://sportinhaarlem.nl/sportkaart/\">Sportkaart\u003C/a> for Sport in Haarlem. One of my assignments was to improve the accessibility of this page.\u003C/p>\n\u003Cp>The page had a number of issues, some were solvable with semantic HTML, others needed more work. I ended up learning a lot about ARIA and WAI-ARIA in the process.\u003C/p>\n\u003Ch2 id=\"the-challenge\">The Challenge\u003C/h2>\n\u003Cp>Accessibility wasn’t considered in the original version of the Sportkaart. That meant the page wasn’t usable with screen readers, wasn’t keyboard-friendly, and didn’t follow semantic HTML best practices.\u003C/p>\n\u003Cp>My task was to analyze and improve this, while working in a large PHP/JS. I had never worked in a big codebase built by others before, so this was definitely a learning experience.\u003C/p>\n\u003Ch3 id=\"testing--research\">Testing &#x26; Research\u003C/h3>\n\u003Cp>I started by running automatic tests like Lighthouse and WCAG analyzers. Then I continued testing manually with just a keyboard and screen readers.\u003C/p>\n\u003Cp>I documented all issues and potential solutions in this \u003Ca href=\"https://github.com/lisagjh/i-love-web/issues/120#issuecomment-2720645357\">GitHub comment\u003C/a>.\u003C/p>\n\u003Cp>Since I hadn’t worked in PHP before, I asked colleagues for help understanding the structure. The main file had over 2000 lines of code, which was overwhelming at first, but a great lesson in reading and understanding unfamiliar codebases.\u003C/p>\n\u003Ch2 id=\"fixing-the-issues\">Fixing the Issues\u003C/h2>\n\u003Cp>Once I understood the flow, I started applying improvements:\u003C/p>\n\u003Ch3 id=\"semantic-html\">Semantic HTML\u003C/h3>\n\u003Cp>Many interactive elements were just \u003Ccode>div\u003C/code>s or \u003Ccode>span\u003C/code>s with event listeners. I replaced these with proper \u003Ccode>&#x3C;button>\u003C/code> elements. This alone made a huge impact: buttons now had focus states, were reachable by keyboard, and announced by screen readers.\u003C/p>\n\u003Ch3 id=\"aria-attributes\">ARIA Attributes\u003C/h3>\n\u003Cp>For modals and popups, I added roles like \u003Ccode>role=\"dialog\"\u003C/code> and \u003Ccode>aria-modal=\"true\"\u003C/code>. One specific issue was that focus didn’t stay inside the modal. I fixed this by creating a \u003Ccode>trapFocus\u003C/code> function.\u003C/p>\n\u003Ch3 id=\"small-but-important-ux-fixes\">Small but Important UX Fixes\u003C/h3>\n\u003Cp>I also added small accessibility features that improve usability for everyone:\u003C/p>\n\u003Cul>\n\u003Cli>Pressing Escape closes the popup\u003C/li>\n\u003Cli>Clicking outside the popup closes it\u003C/li>\n\u003Cli>Labels were added to all icon-only buttons\u003C/li>\n\u003C/ul>\n\u003Cp>These are minor features that have a big impact on usability.\u003C/p>\n\u003Ch2 id=\"client-presentation\">Client Presentation\u003C/h2>\n\u003Cp>A few weeks later I presented these improvements to the client. They had never heard of web accessibility before, so I gave a short introduction and demo-ed the issues:\u003C/p>\n\u003Cul>\n\u003Cli>Keyboard-only navigation (before vs after)\u003C/li>\n\u003Cli>Screen reader behavior (before vs after)\u003C/li>\n\u003C/ul>\n\u003Cp>They were surprised and very interested. We talked about how accessibility doesn’t only help people with permanent disabilities, but also temporary or situational impairments, like a broken arm or shaky hands.\u003C/p>\n\u003Cp>It was great to see how engaged they became once they understood the impact.\u003C/p>\n\u003Ch2 id=\"reflection\">Reflection\u003C/h2>\n\u003Cp>My favorite part of this project was seeing how small changes could make such a big difference. Semantic HTML, proper ARIA roles, and basic interaction patterns go a long way.\u003C/p>\n\u003Cp>It also boosted my confidence in working with unfamiliar code, asking for help, and making a meaningful impact on real-world projects.\u003C/p>",{"headings":573,"localImagePaths":597,"remoteImagePaths":598,"frontmatter":599,"imagePaths":603},[574,577,578,581,584,587,590,593,596],{"depth":31,"slug":575,"text":576},"accessibility-on-the-sportkaart","Accessibility on the Sportkaart",{"depth":33,"slug":455,"text":456},{"depth":37,"slug":579,"text":580},"testing--research","Testing & Research",{"depth":33,"slug":582,"text":583},"fixing-the-issues","Fixing the Issues",{"depth":37,"slug":585,"text":586},"semantic-html","Semantic HTML",{"depth":37,"slug":588,"text":589},"aria-attributes","ARIA Attributes",{"depth":37,"slug":591,"text":592},"small-but-important-ux-fixes","Small but Important UX Fixes",{"depth":33,"slug":594,"text":595},"client-presentation","Client Presentation",{"depth":33,"slug":464,"text":465},[],[],{"id":169,"title":559,"date":560,"livesite":515,"description":561,"image":600,"tags":601,"relatedPosts":602,"lang":115},{"url":563,"alt":510},[329,65,512,21],[566,429,444],[],{"id":444,"data":605,"body":616,"filePath":617,"digest":618,"rendered":619},{"id":37,"title":606,"date":433,"description":607,"image":608,"tags":611,"relatedPosts":614,"livesite":615,"notes":446,"lang":115},"DDA - View Transition","Creative Spike focused on using your creativitiy to create a view transition.",{"url":609,"alt":610},"/work-showcase/dda-view.webp","Mockup of my creative spike focused on implementing view transitions in the Dutch Digital Agencies website,",[439,440,612,613],"P5js","View transitions",[443,429],"https://user-needs-ivory.vercel.app/","At FDND we had a special sprint where we got to let our creativity run free, build fun stuff, and let go of the styleguide of our client. Each week we got a new random prompt, focused on a certain new feature or technology.\n\n## The Challenge\n\nThis week my prompt was **_Glitzy Brutalist View Transitions_**.\n\nI loved this prompt, since I’ve always been interested in brutalism and immediately had some cool ideas on how to implement that aesthetic into the Dutch Digital Agencies website. I ended up ignoring the glitzy part and leaning into the brutalist style.\n\n## My Solution\n\nI started by analyzing the prompt and breaking it down. In architecture, brutalism means raw materials, visible structure, and no unnecessary decorations. In web design, this often translates to black-and-white layouts, strong grid structure, minimalism, bold fonts, and functional aesthetics.\n\nI decided to translate this into a bold view transition.\n\nBefore building anything fancy, I explored how view transitions work. I began small: animating the active link in the nav using a `::before` pseudo-element.\n\n```css\n.active::before {\n  view-transition-name: active-link;\n}\n```\n\nThis one-liner already created a smooth animation between the nav items. Now that I understood how view transitions work, I moved on to the main transition.\n\nI wanted an interactive, brutalist graphic. I built this one using P5.js and Svelte. Inspired by [this wavemaker example](https://p5-svelte.netlify.app/examples/wavemaker), I created my own version that animated the text “DDA” in a glitchy, distorted way.\n\nTo integrate this into the site’s layout, I placed the component inside Layout.svelte and used a reactive boolean `isTransitioning` to toggle it's visibility during page transitions. This component fades in and out during navigation and sits on top of everything with `position: fixed`.\n\n```html\n\u003Cdiv class=\"bg\" class:show-transition=\"{isTransitioning}\">\n  \u003CGraphic />\n\u003C/div>\n```\n\n```css\ndiv.bg {\n  position: fixed;\n  width: 110vw;\n  height: 110vh;\n  opacity: 0;\n  pointer-events: none;\n  transition: opacity 0.5s ease;\n}\n\ndiv.bg.show-transition {\n  opacity: 1;\n  pointer-events: auto;\n}\n```\n\nFor the actual view transitions between pages, I used `::view-transition-old(root)` and `::view-transition-new(root)` with custom keyframes to animate a sliding effect:\n\n```css\n@keyframes slide-out {\n  from {\n    transform: translateX(0);\n    opacity: 1;\n  }\n  to {\n    transform: translateX(-20%);\n    opacity: 0;\n  }\n}\n\n@keyframes slide-in {\n  from {\n    transform: translateX(20%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n```\n\nIt gave the whole page a dramatic and intentional motion that felt super polished.\n\n## The Result\n\nA bold, brutalist-inspired transition with a custom glitchy animation overlay, smooth sliding effects, and fully custom interaction. The view transitions felt cohesive and visually interesting — and they completely transformed the way the site felt when navigating.\n\nThis felt like a real departure from typical smooth/clean animations. It had character.\n\n## Reflection\n\nThis is still one of my favorite projects I made in school! It was a great mix of concept, code, and creativity. I learned how powerful and even simple view transitions can be. I ended up using the view transition on the navigation on the end result of the real project! And have used that view transition on my personal website and other projects.","src/content/projects/DDA-viewtransitions.md","b4683715342b30e1",{"html":620,"metadata":621},"\u003Cp>At FDND we had a special sprint where we got to let our creativity run free, build fun stuff, and let go of the styleguide of our client. Each week we got a new random prompt, focused on a certain new feature or technology.\u003C/p>\n\u003Ch2 id=\"the-challenge\">The Challenge\u003C/h2>\n\u003Cp>This week my prompt was \u003Cstrong>\u003Cem>Glitzy Brutalist View Transitions\u003C/em>\u003C/strong>.\u003C/p>\n\u003Cp>I loved this prompt, since I’ve always been interested in brutalism and immediately had some cool ideas on how to implement that aesthetic into the Dutch Digital Agencies website. I ended up ignoring the glitzy part and leaning into the brutalist style.\u003C/p>\n\u003Ch2 id=\"my-solution\">My Solution\u003C/h2>\n\u003Cp>I started by analyzing the prompt and breaking it down. In architecture, brutalism means raw materials, visible structure, and no unnecessary decorations. In web design, this often translates to black-and-white layouts, strong grid structure, minimalism, bold fonts, and functional aesthetics.\u003C/p>\n\u003Cp>I decided to translate this into a bold view transition.\u003C/p>\n\u003Cp>Before building anything fancy, I explored how view transitions work. I began small: animating the active link in the nav using a \u003Ccode>::before\u003C/code> pseudo-element.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">.active::before\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  view-transition-name\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: active-link;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This one-liner already created a smooth animation between the nav items. Now that I understood how view transitions work, I moved on to the main transition.\u003C/p>\n\u003Cp>I wanted an interactive, brutalist graphic. I built this one using P5.js and Svelte. Inspired by \u003Ca href=\"https://p5-svelte.netlify.app/examples/wavemaker\">this wavemaker example\u003C/a>, I created my own version that animated the text “DDA” in a glitchy, distorted way.\u003C/p>\n\u003Cp>To integrate this into the site’s layout, I placed the component inside Layout.svelte and used a reactive boolean \u003Ccode>isTransitioning\u003C/code> to toggle it’s visibility during page transitions. This component fades in and out during navigation and sits on top of everything with \u003Ccode>position: fixed\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\"> class\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"bg\"\u003C/span>\u003Cspan style=\"color:#B392F0\"> class:show-transition\u003C/span>\u003Cspan style=\"color:#E1E4E8\">=\u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"{isTransitioning}\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#FDAEB7;font-style:italic\">Graphic\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> />\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\">.bg\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  position\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">fixed\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  width\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">110\u003C/span>\u003Cspan style=\"color:#F97583\">vw\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  height\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">110\u003C/span>\u003Cspan style=\"color:#F97583\">vh\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  pointer-events\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">none\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  transition\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: opacity \u003C/span>\u003Cspan style=\"color:#79B8FF\">0.5\u003C/span>\u003Cspan style=\"color:#F97583\">s\u003C/span>\u003Cspan style=\"color:#79B8FF\"> ease\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#85E89D\">div\u003C/span>\u003Cspan style=\"color:#B392F0\">.bg.show-transition\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  pointer-events\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">auto\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>For the actual view transitions between pages, I used \u003Ccode>::view-transition-old(root)\u003C/code> and \u003Ccode>::view-transition-new(root)\u003C/code> with custom keyframes to animate a sliding effect:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"css\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@keyframes\u003C/span>\u003Cspan style=\"color:#FFAB70\"> slide-out\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    transform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">translateX\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  to\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    transform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">translateX\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">-20\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">@keyframes\u003C/span>\u003Cspan style=\"color:#FFAB70\"> slide-in\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  from\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    transform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">translateX\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">20\u003C/span>\u003Cspan style=\"color:#F97583\">%\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  to\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    transform\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">translateX\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">0\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">    opacity\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#79B8FF\">1\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>It gave the whole page a dramatic and intentional motion that felt super polished.\u003C/p>\n\u003Ch2 id=\"the-result\">The Result\u003C/h2>\n\u003Cp>A bold, brutalist-inspired transition with a custom glitchy animation overlay, smooth sliding effects, and fully custom interaction. The view transitions felt cohesive and visually interesting — and they completely transformed the way the site felt when navigating.\u003C/p>\n\u003Cp>This felt like a real departure from typical smooth/clean animations. It had character.\u003C/p>\n\u003Ch2 id=\"reflection\">Reflection\u003C/h2>\n\u003Cp>This is still one of my favorite projects I made in school! It was a great mix of concept, code, and creativity. I learned how powerful and even simple view transitions can be. I ended up using the view transition on the navigation on the end result of the real project! And have used that view transition on my personal website and other projects.\u003C/p>",{"headings":622,"localImagePaths":627,"remoteImagePaths":628,"frontmatter":629,"imagePaths":633},[623,624,625,626],{"depth":33,"slug":455,"text":456},{"depth":33,"slug":458,"text":459},{"depth":33,"slug":461,"text":462},{"depth":33,"slug":464,"text":465},[],[],{"id":37,"title":606,"date":433,"livesite":615,"description":607,"image":630,"notes":446,"tags":631,"relatedPosts":632,"lang":115},{"url":609,"alt":610},[439,440,612,613],[443,429],[]]